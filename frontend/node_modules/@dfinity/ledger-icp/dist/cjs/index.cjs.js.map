{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/account_identifier.ts", "../../../../node_modules/@noble/hashes/src/_assert.ts", "../../../../node_modules/@noble/hashes/src/utils.ts", "../../../../node_modules/@noble/hashes/src/_md.ts", "../../../../node_modules/@noble/hashes/src/sha256.ts", "../../src/canisters/ledger/ledger.request.converts.ts", "../../src/constants/constants.ts", "../../src/errors/ledger.errors.ts", "../../src/index.canister.ts", "../../candid/index.certified.idl.js", "../../candid/index.idl.js", "../../src/constants/canister_ids.ts", "../../src/errors/index.errors.ts", "../../src/utils/params.utils.ts", "../../src/ledger.canister.ts", "../../candid/ledger.certified.idl.js", "../../candid/ledger.idl.js", "../../src/utils/accounts.utils.ts"],
  "sourcesContent": ["export type * from \"../candid/index\";\nexport type {\n  Account as Icrc1Account,\n  ApproveError as Icrc1ApproveError,\n  Icrc1BlockIndex,\n  SubAccount as Icrc1SubAccount,\n  Icrc1Timestamp,\n  Icrc1Tokens,\n  Icrc1TransferError,\n  Icrc1TransferResult,\n  ApproveResult as Icrc2ApproveResult,\n  TransferFromError as Icrc2TransferFromError,\n  TransferFromResult as Icrc2TransferFromResult,\n  Value,\n} from \"../candid/ledger\";\nexport { AccountIdentifier, SubAccount } from \"./account_identifier\";\nexport * from \"./canisters/ledger/ledger.request.converts\";\nexport * from \"./errors/ledger.errors\";\nexport { IndexCanister } from \"./index.canister\";\nexport { LedgerCanister } from \"./ledger.canister\";\nexport type * from \"./types/common\";\nexport * from \"./types/ledger.options\";\nexport type {\n  Icrc1TransferRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"./types/ledger_converters\";\nexport * from \"./utils/accounts.utils\";\n", "import type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\n\nexport class AccountIdentifier {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromHex(hex: string): AccountIdentifier {\n    const bytes = Uint8Array.from(Buffer.from(hex, \"hex\"));\n\n    if (bytes.length !== 32) {\n      throw new Error(\n        `Invalid AccountIdentifier: expected 32 bytes, got ${bytes.length}.`,\n      );\n    }\n\n    const providedChecksum = uint8ArrayToHexString(bytes.slice(0, 4));\n\n    const hash = bytes.slice(4);\n    const expectedChecksum = uint8ArrayToHexString(bigEndianCrc32(hash));\n\n    if (providedChecksum !== expectedChecksum) {\n      throw Error(\n        `Checksum mismatch. Expected ${expectedChecksum}, but got ${providedChecksum}.`,\n      );\n    }\n\n    return new AccountIdentifier(bytes);\n  }\n\n  public static fromPrincipal({\n    principal,\n    subAccount = SubAccount.fromID(0),\n  }: {\n    principal: Principal;\n    subAccount?: SubAccount;\n  }): AccountIdentifier {\n    // Hash (sha224) the principal, the subAccount and some padding\n    const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n    const shaObj = sha224.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        ...padding,\n        ...principal.toUint8Array(),\n        ...subAccount.toUint8Array(),\n      ]),\n    );\n    const hash = shaObj.digest();\n\n    // Prepend the checksum of the hash and convert to a hex string\n    const checksum = bigEndianCrc32(hash);\n    const bytes = new Uint8Array([...checksum, ...hash]);\n    return new AccountIdentifier(bytes);\n  }\n\n  public toHex(): string {\n    return uint8ArrayToHexString(this.bytes);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n\n  public toNumbers(): number[] {\n    return Array.from(this.bytes);\n  }\n\n  public toAccountIdentifierHash(): { hash: Uint8Array } {\n    return {\n      hash: this.toUint8Array(),\n    };\n  }\n}\n\nexport class SubAccount {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromBytes(bytes: Uint8Array): SubAccount {\n    if (bytes.length !== 32) {\n      throw new Error(\"Subaccount length must be 32-bytes\");\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromPrincipal(principal: Principal): SubAccount {\n    const bytes = new Uint8Array(32).fill(0);\n\n    const principalBytes = principal.toUint8Array();\n    bytes[0] = principalBytes.length;\n\n    for (let i = 0; i < principalBytes.length; i++) {\n      bytes[1 + i] = principalBytes[i];\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromID(id: number): SubAccount {\n    if (id < 0) {\n      throw new Error(\"Number cannot be negative\");\n    }\n\n    if (id > Number.MAX_SAFE_INTEGER) {\n      throw new Error(\"Number is too large to fit in 32 bytes.\");\n    }\n\n    const view = new DataView(new ArrayBuffer(32));\n\n    // Fix for IOS < 14.8 setBigUint64 absence\n    if (typeof view.setBigUint64 === \"function\") {\n      view.setBigUint64(24, BigInt(id));\n    } else {\n      const TWO_TO_THE_32 = BigInt(1) << BigInt(32);\n      view.setUint32(24, Number(BigInt(id) >> BigInt(32)));\n      view.setUint32(28, Number(BigInt(id) % TWO_TO_THE_32));\n    }\n\n    const uint8Arary = new Uint8Array(view.buffer);\n    return new SubAccount(uint8Arary);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import {\n  arrayOfNumberToUint8Array,\n  isNullish,\n  toNullable,\n} from \"@dfinity/utils\";\nimport type {\n  TransferArg as Icrc1TransferRawRequest,\n  icrc21_consent_message_request as Icrc21ConsentMessageRawRequest,\n  ApproveArgs as Icrc2ApproveRawRequest,\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledger\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport type {\n  Icrc1TransferRequest,\n  Icrc21ConsentMessageRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"../../types/ledger_converters\";\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n  createdAt,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toUint8Array(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time:\n    createdAt !== undefined ? [{ timestamp_nanos: createdAt }] : [],\n  from_subaccount:\n    fromSubAccount === undefined\n      ? []\n      : [arrayOfNumberToUint8Array(fromSubAccount)],\n});\n\n// WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n// relationship between the memo and the icrc1Memo of a transaction. The ICRC-1\n// interface simply cannot set the memo field and the non-ICRC-1 interface\n// cannot set the icrc1Memo field, even though the icrc1Memo field is called\n// just \"memo\" in canister method params.\nexport const toIcrc1TransferRawRequest = ({\n  fromSubAccount,\n  to,\n  amount,\n  fee,\n  icrc1Memo,\n  createdAt,\n}: Icrc1TransferRequest): Icrc1TransferRawRequest => ({\n  to,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  amount,\n  memo: toNullable(icrc1Memo),\n  created_at_time: toNullable(createdAt),\n  from_subaccount: toNullable(fromSubAccount),\n});\n\nexport const toIcrc2ApproveRawRequest = ({\n  fee,\n  createdAt,\n  icrc1Memo,\n  fromSubAccount,\n  expected_allowance,\n  expires_at,\n  amount,\n  ...rest\n}: Icrc2ApproveRequest): Icrc2ApproveRawRequest => ({\n  ...rest,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  memo: toNullable(icrc1Memo),\n  from_subaccount: toNullable(fromSubAccount),\n  created_at_time: toNullable(createdAt),\n  amount,\n  expected_allowance: toNullable(expected_allowance),\n  expires_at: toNullable(expires_at),\n});\n\nexport const toIcrc21ConsentMessageRawRequest = ({\n  userPreferences: {\n    metadata: { utcOffsetMinutes, language },\n    deriveSpec,\n  },\n  ...rest\n}: Icrc21ConsentMessageRequest): Icrc21ConsentMessageRawRequest => ({\n  ...rest,\n  user_preferences: {\n    metadata: {\n      language,\n      utc_offset_minutes: toNullable(utcOffsetMinutes),\n    },\n    device_spec: isNullish(deriveSpec)\n      ? toNullable()\n      : toNullable(\n          \"GenericDisplay\" in deriveSpec\n            ? { GenericDisplay: null }\n            : {\n                LineDisplay: {\n                  characters_per_line: deriveSpec.LineDisplay.charactersPerLine,\n                  lines_per_page: deriveSpec.LineDisplay.linesPerPage,\n                },\n              },\n        ),\n  },\n});\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "import type {\n  Icrc1BlockIndex,\n  Icrc1Tokens,\n  icrc21_error as Icrc21RawError,\n  ApproveError as RawApproveError,\n  Icrc1TransferError as RawIcrc1TransferError,\n  TransferError as RawTransferError,\n} from \"../../candid/ledger\";\nimport type { BlockHeight } from \"../types/common\";\n\nexport class IcrcError extends Error {}\n\nexport class TransferError extends IcrcError {}\nexport class ApproveError extends IcrcError {}\nexport class ConsentMessageError extends IcrcError {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InvalidAccountIDError extends Error {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: bigint) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs?: number | undefined) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends IcrcError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport class GenericError extends ApproveError {\n  constructor(\n    public readonly message: string,\n    public readonly error_code: bigint,\n  ) {\n    super();\n  }\n}\n\nexport class TemporarilyUnavailableError extends ApproveError {}\n\nexport class DuplicateError extends ApproveError {\n  constructor(public readonly duplicateOf: Icrc1BlockIndex) {\n    super();\n  }\n}\n\nexport class AllowanceChangedError extends ApproveError {\n  constructor(public readonly currentAllowance: Icrc1Tokens) {\n    super();\n  }\n}\n\nexport class CreatedInFutureError extends ApproveError {}\nexport class TooOldError extends ApproveError {}\n\nexport class ExpiredError extends ApproveError {\n  constructor(public readonly ledgerTime: bigint) {\n    super();\n  }\n}\n\nexport class InsufficientPaymentError extends ConsentMessageError {}\nexport class UnsupportedCanisterCallError extends ConsentMessageError {}\nexport class ConsentMessageUnavailableError extends ConsentMessageError {}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError,\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance.e8s,\n    );\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos),\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc1TransferError = (\n  rawTransferError: RawIcrc1TransferError,\n): TransferError => {\n  if (\"Duplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.Duplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance,\n    );\n  }\n  if (\"CreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TooOld\" in rawTransferError) {\n    return new TxTooOldError();\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc2ApproveError = (\n  rawApproveError: RawApproveError,\n): ApproveError => {\n  /**\n   * export type ApproveError =\n   *   | { InsufficientFunds: { balance: Icrc1Tokens } };\n   */\n\n  if (\"GenericError\" in rawApproveError) {\n    return new GenericError(\n      rawApproveError.GenericError.message,\n      rawApproveError.GenericError.error_code,\n    );\n  }\n\n  if (\"TemporarilyUnavailable\" in rawApproveError) {\n    return new TemporarilyUnavailableError();\n  }\n\n  if (\"Duplicate\" in rawApproveError) {\n    return new DuplicateError(rawApproveError.Duplicate.duplicate_of);\n  }\n\n  if (\"BadFee\" in rawApproveError) {\n    return new BadFeeError(rawApproveError.BadFee.expected_fee);\n  }\n\n  if (\"AllowanceChanged\" in rawApproveError) {\n    return new AllowanceChangedError(\n      rawApproveError.AllowanceChanged.current_allowance,\n    );\n  }\n\n  if (\"CreatedInFuture\" in rawApproveError) {\n    return new CreatedInFutureError();\n  }\n\n  if (\"TooOld\" in rawApproveError) {\n    return new TooOldError();\n  }\n\n  if (\"Expired\" in rawApproveError) {\n    return new ExpiredError(rawApproveError.Expired.ledger_time);\n  }\n\n  if (\"InsufficientFunds\" in rawApproveError) {\n    return new InsufficientFundsError(\n      rawApproveError.InsufficientFunds.balance,\n    );\n  }\n\n  // Edge case\n  return new ApproveError(\n    `Unknown error type ${JSON.stringify(rawApproveError)}`,\n  );\n};\n\nexport const mapIcrc21ConsentMessageError = (\n  rawError: Icrc21RawError,\n): ConsentMessageError => {\n  if (\"GenericError\" in rawError) {\n    return new GenericError(\n      rawError.GenericError.description,\n      rawError.GenericError.error_code,\n    );\n  }\n\n  if (\"InsufficientPayment\" in rawError) {\n    return new InsufficientPaymentError(\n      rawError.InsufficientPayment.description,\n    );\n  }\n\n  if (\"UnsupportedCanisterCall\" in rawError) {\n    return new UnsupportedCanisterCallError(\n      rawError.UnsupportedCanisterCall.description,\n    );\n  }\n  if (\"ConsentMessageUnavailable\" in rawError) {\n    return new ConsentMessageUnavailableError(\n      rawError.ConsentMessageUnavailable.description,\n    );\n  }\n\n  // Edge case\n  return new ConsentMessageError(\n    `Unknown error type ${JSON.stringify(rawError)}`,\n  );\n};\n", "import {\n  Canister,\n  createServices,\n  toNullable,\n  type CanisterOptions,\n} from \"@dfinity/utils\";\nimport type {\n  GetAccountIdentifierTransactionsResponse,\n  _SERVICE as IndexService,\n} from \"../candid/index\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/index.certified.idl\";\nimport { idlFactory } from \"../candid/index.idl\";\nimport { MAINNET_INDEX_CANISTER_ID } from \"./constants/canister_ids\";\nimport { IndexError } from \"./errors/index.errors\";\nimport type { GetTransactionsParams } from \"./types/index.params\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport { paramToAccountIdentifierHex } from \"./utils/params.utils\";\n\nexport class IndexCanister extends Canister<IndexService> {\n  static create({\n    canisterId: optionsCanisterId,\n    ...options\n  }: CanisterOptions<IndexService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IndexService>({\n        options: {\n          ...options,\n          canisterId: optionsCanisterId ?? MAINNET_INDEX_CANISTER_ID,\n        },\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IndexCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   */\n  accountBalance = ({\n    certified,\n    accountIdentifier,\n  }: AccountBalanceParams): Promise<bigint> =>\n    this.caller({ certified }).get_account_identifier_balance(\n      paramToAccountIdentifierHex(accountIdentifier),\n    );\n\n  /**\n   * Returns the transactions and balance of an ICP account.\n   *\n   * @param {GetTransactionsParams} params The parameters to get the transactions.\n   * @param {boolean} params.certified query or update call.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {bigint} params.start If set then the results will start from the next most recent transaction id after start (start won't be included). If not provided, then the results will start from the most recent transaction id.\n   * @param {bigint} params.maxResults Maximum number of transactions to fetch.\n   * @returns {Promise<GetAccountIdentifierTransactionsResponse>} The transactions, balance and the transaction id of the oldest transaction the account has.\n   * @throws {@link IndexError}\n   */\n  getTransactions = async ({\n    certified,\n    accountIdentifier,\n    start,\n    maxResults: max_results,\n  }: GetTransactionsParams): Promise<GetAccountIdentifierTransactionsResponse> => {\n    const response = await this.caller({\n      certified,\n    }).get_account_identifier_transactions({\n      account_identifier: paramToAccountIdentifierHex(accountIdentifier),\n      start: toNullable(start),\n      max_results,\n    });\n\n    if (\"Err\" in response) {\n      throw new IndexError(response.Err.message);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const GetAccountIdentifierTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat64,\n    'start' : IDL.Opt(IDL.Nat64),\n    'account_identifier' : IDL.Text,\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : IDL.Text,\n    }),\n    'Burn' : IDL.Record({\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n    'Mint' : IDL.Record({ 'to' : IDL.Text, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : IDL.Nat64,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : Operation,\n    'timestamp' : IDL.Opt(TimeStamp),\n    'created_at_time' : IDL.Opt(TimeStamp),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : IDL.Nat64,\n    'transaction' : Transaction,\n  });\n  const GetAccountIdentifierTransactionsResponse = IDL.Record({\n    'balance' : IDL.Nat64,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAccountIdentifierTransactionsError = IDL.Record({\n    'message' : IDL.Text,\n  });\n  const GetAccountIdentifierTransactionsResult = IDL.Variant({\n    'Ok' : GetAccountIdentifierTransactionsResponse,\n    'Err' : GetAccountIdentifierTransactionsError,\n  });\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(IDL.Nat),\n    'account' : Account,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n  });\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n    'status_code' : IDL.Nat16,\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : IDL.Nat64 });\n  return IDL.Service({\n    'get_account_identifier_balance' : IDL.Func([IDL.Text], [IDL.Nat64], []),\n    'get_account_identifier_transactions' : IDL.Func(\n        [GetAccountIdentifierTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        [],\n      ),\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        [],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], []),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], []),\n    'icrc1_balance_of' : IDL.Func([Account], [IDL.Nat64], []),\n    'ledger_id' : IDL.Func([], [IDL.Principal], []),\n    'status' : IDL.Func([], [Status], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArg];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const GetAccountIdentifierTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat64,\n    'start' : IDL.Opt(IDL.Nat64),\n    'account_identifier' : IDL.Text,\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : IDL.Text,\n    }),\n    'Burn' : IDL.Record({\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n    'Mint' : IDL.Record({ 'to' : IDL.Text, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : IDL.Nat64,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : Operation,\n    'timestamp' : IDL.Opt(TimeStamp),\n    'created_at_time' : IDL.Opt(TimeStamp),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : IDL.Nat64,\n    'transaction' : Transaction,\n  });\n  const GetAccountIdentifierTransactionsResponse = IDL.Record({\n    'balance' : IDL.Nat64,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAccountIdentifierTransactionsError = IDL.Record({\n    'message' : IDL.Text,\n  });\n  const GetAccountIdentifierTransactionsResult = IDL.Variant({\n    'Ok' : GetAccountIdentifierTransactionsResponse,\n    'Err' : GetAccountIdentifierTransactionsError,\n  });\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(IDL.Nat),\n    'account' : Account,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n  });\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n    'status_code' : IDL.Nat16,\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : IDL.Nat64 });\n  return IDL.Service({\n    'get_account_identifier_balance' : IDL.Func(\n        [IDL.Text],\n        [IDL.Nat64],\n        ['query'],\n      ),\n    'get_account_identifier_transactions' : IDL.Func(\n        [GetAccountIdentifierTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        ['query'],\n      ),\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        ['query'],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], ['query']),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], ['query']),\n    'icrc1_balance_of' : IDL.Func([Account], [IDL.Nat64], ['query']),\n    'ledger_id' : IDL.Func([], [IDL.Principal], ['query']),\n    'status' : IDL.Func([], [Status], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArg];\n};\n", "import { Principal } from \"@dfinity/principal\";\n\nexport const MAINNET_LEDGER_CANISTER_ID = Principal.fromText(\n  \"ryjl3-tyaaa-aaaaa-aaaba-cai\",\n);\n\nexport const MAINNET_INDEX_CANISTER_ID = Principal.fromText(\n  \"qhbym-qaaaa-aaaaa-aaafq-cai\",\n);\n", "export class IndexError extends Error {}\n", "import { AccountIdentifier } from \"../account_identifier\";\nimport type { AccountIdentifierHex } from \"../types/common\";\nimport type { AccountIdentifierParam } from \"../types/ledger.params\";\n\nexport const paramToAccountIdentifier = (\n  param: AccountIdentifierParam,\n): AccountIdentifier =>\n  param instanceof AccountIdentifier ? param : AccountIdentifier.fromHex(param);\n\nexport const paramToAccountIdentifierHex = (\n  param: AccountIdentifierParam,\n): AccountIdentifierHex =>\n  param instanceof AccountIdentifier ? param.toHex() : param;\n", "import type { Principal } from \"@dfinity/principal\";\nimport { Canister, createServices, type QueryParams } from \"@dfinity/utils\";\nimport type {\n  Icrc1BlockIndex,\n  _SERVICE as LedgerService,\n  Value,\n  icrc21_consent_info,\n} from \"../candid/ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory } from \"../candid/ledger.idl\";\nimport {\n  toIcrc1TransferRawRequest,\n  toIcrc21ConsentMessageRawRequest,\n  toIcrc2ApproveRawRequest,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport {\n  mapIcrc1TransferError,\n  mapIcrc21ConsentMessageError,\n  mapIcrc2ApproveError,\n  mapTransferError,\n} from \"./errors/ledger.errors\";\nimport type { BlockHeight } from \"./types/common\";\nimport type { LedgerCanisterOptions } from \"./types/ledger.options\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport type {\n  Icrc1TransferRequest,\n  Icrc21ConsentMessageRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"./types/ledger_converters\";\nimport { paramToAccountIdentifier } from \"./utils/params.utils\";\n\nexport class LedgerCanister extends Canister<LedgerService> {\n  public static create(options: LedgerCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const { service, certifiedService } = createServices<LedgerService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new LedgerCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier: accountIdentifierParam,\n    certified = true,\n  }: AccountBalanceParams): Promise<bigint> => {\n    const accountIdentifier = paramToAccountIdentifier(accountIdentifierParam);\n\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toUint8Array(),\n    });\n    return tokens.e8s;\n  };\n\n  /**\n   * Fetches the ledger metadata.\n   *\n   * @param {QueryParams} params - The parameters used to fetch the metadata, notably query or certified call.\n   * @returns {Promise<Array<[string, Value]>>} The metadata of the ICP ledger. A promise that resolves to an array of metadata entries, where each entry is a tuple consisting of a string and a value.\n   */\n  metadata = (params: QueryParams): Promise<Array<[string, Value]>> => {\n    const { icrc1_metadata } = this.caller(params);\n    return icrc1_metadata();\n  };\n\n  /**\n   * Returns the transaction fee of the ICP ledger canister.\n   *\n   * @param {QueryParams} [params={certified: false}] - Optional query parameters for the request, defaulting to `{ certified: false }` for backwards compatibility reason.\n   * @returns {Promise<bigint>} A promise that resolves to the transaction fee as a bigint.\n   */\n  public transactionFee = async (\n    params: QueryParams = { certified: false },\n  ): Promise<bigint> => {\n    const { transfer_fee } = this.caller(params);\n\n    const {\n      transfer_fee: { e8s },\n    } = await transfer_fee({});\n\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  // WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n  // relationship between the memo and the icrc1Memo of a transaction. The\n  // ICRC-1 interface simply cannot set the memo field and the non-ICRC-1\n  // interface cannot set the icrc1Memo field, even though the icrc1Memo field\n  // is called just \"memo\" in canister method params.\n  /**\n   * Transfer ICP from the caller to the destination `Account`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public icrc1Transfer = async (\n    request: Icrc1TransferRequest,\n  ): Promise<BlockHeight> => {\n    const rawRequest = toIcrc1TransferRawRequest(request);\n    const response = await this.certifiedService.icrc1_transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapIcrc1TransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  /**\n   * This method entitles the `spender` to transfer token `amount` on behalf of the caller from account `{ owner = caller; subaccount = from_subaccount }`.\n   *\n   * Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md#icrc2_approve\n   *\n   * @param {Icrc2ApproveRequest} params - The parameters to approve.\n   * @throws {ApproveError} If the approval fails.\n   * @returns {Promise<Icrc1BlockIndex>} The block index of the approved transaction.\n   */\n  icrc2Approve = async (\n    params: Icrc2ApproveRequest,\n  ): Promise<Icrc1BlockIndex> => {\n    const { icrc2_approve } = this.caller({ certified: true });\n\n    const response = await icrc2_approve(toIcrc2ApproveRawRequest(params));\n\n    if (\"Err\" in response) {\n      throw mapIcrc2ApproveError(response.Err);\n    }\n\n    return response.Ok;\n  };\n\n  /**\n   * Fetches the consent message for a specified canister call, intended to provide a human-readable message that helps users make informed decisions.\n   *\n   * @link: https://github.com/dfinity/wg-identity-authentication/blob/main/topics/ICRC-21/icrc_21_consent_msg.md\n   *\n   * @param {Icrc21ConsentMessageRequest} params - The request parameters containing the method name, arguments, and consent preferences (e.g., language).\n   * @returns {Promise<icrc21_consent_info>} - A promise that resolves to the consent message response, which includes the consent message in the specified language and other related information.\n   *\n   * @throws {InsufficientPaymentError} - This error is reserved for future use, in case payment extensions are introduced. For example, if consent messages, which are currently free, begin to require payments.\n   * @throws {UnsupportedCanisterCallError} - If the specified canister call is not supported.\n   * @throws {ConsentMessageUnavailableError} - If there is no consent message available.\n   * @throws {GenericError} - For any other generic errors.\n   */\n  icrc21ConsentMessage = async (\n    params: Icrc21ConsentMessageRequest,\n  ): Promise<icrc21_consent_info> => {\n    const { icrc21_canister_call_consent_message } = this.caller({\n      certified: true,\n    });\n\n    const response = await icrc21_canister_call_consent_message(\n      toIcrc21ConsentMessageRawRequest(params),\n    );\n\n    if (\"Err\" in response) {\n      throw mapIcrc21ConsentMessageError(response.Err);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'spender_subaccount' : IDL.Opt(SubAccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Icrc1Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Icrc1Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        [],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgsDfx], [Tokens], []),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_metadata' : IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, Value))], []),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], []),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'query_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        [],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'spender_subaccount' : IDL.Opt(SubAccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Icrc1Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Icrc1Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        ['query'],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'account_balance_dfx' : IDL.Func(\n        [AccountBalanceArgsDfx],\n        [Tokens],\n        ['query'],\n      ),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], ['query']),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, Value))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], ['query']),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], ['query']),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        ['query'],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "import { bigEndianCrc32, isNullish } from \"@dfinity/utils\";\nimport { InvalidAccountIDError } from \"../errors/ledger.errors\";\n\n/**\n * Checks account id check sum\n *\n * @throws InvalidAccountIDError\n */\nexport const checkAccountId = (accountId: string): void => {\n  // Verify the checksum of the given address.\n  if (accountId.length != 64) {\n    throw new InvalidAccountIDError(\n      `Invalid account identifier ${accountId}. The account identifier must be 64 chars in length.`,\n    );\n  }\n\n  const toAccountBytes = Buffer.from(accountId, \"hex\");\n  const foundChecksum = toAccountBytes.slice(0, 4);\n  const expectedCheckum = Buffer.from(bigEndianCrc32(toAccountBytes.slice(4)));\n  if (!expectedCheckum.equals(foundChecksum)) {\n    throw new InvalidAccountIDError(\n      `Account identifier ${accountId} has an invalid checksum. Are you sure the account identifier is correct?\\n\\nExpected checksum: ${expectedCheckum.toString(\n        \"hex\",\n      )}\\nFound checksum: ${foundChecksum.toString(\"hex\")}`,\n    );\n  }\n};\n\n/**\n * Checks if a given string (or undefined) is a valid ICP account identifier.\n *\n * It uses the `checkAccountId` function to validate the checksum, but it does not throw an error.\n *\n * @param {string | undefined} address The putative ICP account identifier.\n */\n\nexport const isIcpAccountIdentifier = (\n  address: string | undefined,\n): boolean => {\n  if (isNullish(address)) {\n    return false;\n  }\n\n  try {\n    checkAccountId(address);\n    return true;\n  } catch (_: unknown) {\n    // We do not parse the error\n  }\n\n  return false;\n};\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "AccountIdentifier", "AllowanceChangedError", "ApproveError", "BadFeeError", "ConsentMessageError", "ConsentMessageUnavailableError", "CreatedInFutureError", "DuplicateError", "ExpiredError", "GenericError", "IcrcError", "IndexCanister", "InsufficientFundsError", "InsufficientPaymentError", "InvalidAccountIDError", "InvalidSenderError", "LedgerCanister", "SubAccount", "TemporarilyUnavailableError", "TooOldError", "TransferError", "TxCreatedInFutureError", "TxDuplicateError", "TxTooOldError", "UnsupportedCanisterCallError", "checkAccountId", "isIcpAccountIdentifier", "mapIcrc1TransferError", "mapIcrc21ConsentMessageError", "mapIcrc2ApproveError", "mapTransferError", "toIcrc1TransferRawRequest", "toIcrc21ConsentMessageRawRequest", "toIcrc2ApproveRawRequest", "toTransferRawRequest", "__toCommonJS", "import_utils", "isBytes", "a", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "bytes", "min", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "bytes", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "toBytes", "tmp", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "l", "Chi", "a", "b", "c", "Maj", "HashMD", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "exists", "buffer", "toBytes", "len", "pos", "take", "dataView", "out", "output", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "Chi", "T2", "Maj", "SHA224", "sha224", "wrapConstructor", "SHA224", "AccountIdentifier", "_AccountIdentifier", "bytes", "hex", "providedChecksum", "hash", "expectedChecksum", "principal", "subAccount", "SubAccount", "padding", "shaObj", "sha224", "checksum", "_SubAccount", "principalBytes", "i", "id", "view", "TWO_TO_THE_32", "uint8Arary", "import_utils", "CREATE_CANISTER_MEMO", "TOP_UP_CANISTER_MEMO", "TRANSACTION_FEE", "E8S_PER_TOKEN", "e8sToTokens", "e8s", "toTransferRawRequest", "to", "amount", "memo", "fee", "fromSubAccount", "createdAt", "TRANSACTION_FEE", "toIcrc1TransferRawRequest", "icrc1Memo", "toIcrc2ApproveRawRequest", "expected_allowance", "expires_at", "rest", "toIcrc21ConsentMessageRawRequest", "utcOffsetMinutes", "language", "deriveSpec", "IcrcError", "TransferError", "ApproveError", "ConsentMessageError", "InvalidSenderError", "InvalidAccountIDError", "InsufficientFundsError", "balance", "TxTooOldError", "allowed_window_secs", "TxCreatedInFutureError", "TxDuplicateError", "duplicateOf", "BadFeeError", "expectedFee", "GenericError", "message", "error_code", "TemporarilyUnavailableError", "DuplicateError", "AllowanceChangedError", "currentAllowance", "CreatedInFutureError", "TooOldError", "ExpiredError", "ledgerTime", "InsufficientPaymentError", "UnsupportedCanisterCallError", "ConsentMessageUnavailableError", "mapTransferError", "rawTransferError", "mapIcrc1TransferError", "mapIcrc2ApproveError", "rawApproveError", "mapIcrc21ConsentMessageError", "rawError", "import_utils", "idlFactory", "IDL", "InitArg", "GetAccountIdentifierTransactionsArgs", "Tokens", "TimeStamp", "Operation", "Transaction", "TransactionWithId", "GetAccountIdentifierTransactionsResponse", "GetAccountIdentifierTransactionsError", "GetAccountIdentifierTransactionsResult", "Account", "GetAccountTransactionsArgs", "GetBlocksRequest", "GetBlocksResponse", "HttpRequest", "HttpResponse", "Status", "idlFactory", "IDL", "InitArg", "GetAccountIdentifierTransactionsArgs", "Tokens", "TimeStamp", "Operation", "Transaction", "TransactionWithId", "GetAccountIdentifierTransactionsResponse", "GetAccountIdentifierTransactionsError", "GetAccountIdentifierTransactionsResult", "Account", "GetAccountTransactionsArgs", "GetBlocksRequest", "GetBlocksResponse", "HttpRequest", "HttpResponse", "Status", "import_principal", "MAINNET_LEDGER_CANISTER_ID", "MAINNET_INDEX_CANISTER_ID", "IndexError", "paramToAccountIdentifier", "param", "AccountIdentifier", "paramToAccountIdentifierHex", "IndexCanister", "_IndexCanister", "optionsCanisterId", "options", "service", "certifiedService", "canisterId", "MAINNET_INDEX_CANISTER_ID", "idlFactory", "certified", "accountIdentifier", "paramToAccountIdentifierHex", "start", "max_results", "response", "IndexError", "import_utils", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "BlockIndex", "GetBlocksArgs", "Memo", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "BlockIndex", "GetBlocksArgs", "Memo", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "LedgerCanister", "_LedgerCanister", "options", "canisterId", "MAINNET_LEDGER_CANISTER_ID", "service", "certifiedService", "idlFactory", "accountIdentifierParam", "certified", "accountIdentifier", "paramToAccountIdentifier", "params", "icrc1_metadata", "transfer_fee", "e8s", "request", "rawRequest", "toTransferRawRequest", "response", "mapTransferError", "toIcrc1TransferRawRequest", "mapIcrc1TransferError", "icrc2_approve", "toIcrc2ApproveRawRequest", "mapIcrc2ApproveError", "icrc21_canister_call_consent_message", "toIcrc21ConsentMessageRawRequest", "mapIcrc21ConsentMessageError", "import_utils", "checkAccountId", "accountId", "InvalidAccountIDError", "toAccountBytes", "foundChecksum", "expectedCheckum", "isIcpAccountIdentifier", "address"]
}
