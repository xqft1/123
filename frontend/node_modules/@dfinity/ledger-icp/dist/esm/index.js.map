{
  "version": 3,
  "sources": ["../../src/utils/accounts.utils.ts"],
  "sourcesContent": ["import { bigEndianCrc32, isNullish } from \"@dfinity/utils\";\nimport { InvalidAccountIDError } from \"../errors/ledger.errors\";\n\n/**\n * Checks account id check sum\n *\n * @throws InvalidAccountIDError\n */\nexport const checkAccountId = (accountId: string): void => {\n  // Verify the checksum of the given address.\n  if (accountId.length != 64) {\n    throw new InvalidAccountIDError(\n      `Invalid account identifier ${accountId}. The account identifier must be 64 chars in length.`,\n    );\n  }\n\n  const toAccountBytes = Buffer.from(accountId, \"hex\");\n  const foundChecksum = toAccountBytes.slice(0, 4);\n  const expectedCheckum = Buffer.from(bigEndianCrc32(toAccountBytes.slice(4)));\n  if (!expectedCheckum.equals(foundChecksum)) {\n    throw new InvalidAccountIDError(\n      `Account identifier ${accountId} has an invalid checksum. Are you sure the account identifier is correct?\\n\\nExpected checksum: ${expectedCheckum.toString(\n        \"hex\",\n      )}\\nFound checksum: ${foundChecksum.toString(\"hex\")}`,\n    );\n  }\n};\n\n/**\n * Checks if a given string (or undefined) is a valid ICP account identifier.\n *\n * It uses the `checkAccountId` function to validate the checksum, but it does not throw an error.\n *\n * @param {string | undefined} address The putative ICP account identifier.\n */\n\nexport const isIcpAccountIdentifier = (\n  address: string | undefined,\n): boolean => {\n  if (isNullish(address)) {\n    return false;\n  }\n\n  try {\n    checkAccountId(address);\n    return true;\n  } catch (_: unknown) {\n    // We do not parse the error\n  }\n\n  return false;\n};\n"],
  "mappings": "sWAAA,OAAS,kBAAAA,EAAgB,aAAAC,MAAiB,iBAQnC,IAAMC,EAAkBC,GAA4B,CAEzD,GAAIA,EAAU,QAAU,GACtB,MAAM,IAAIC,EACR,8BAA8BD,CAAS,sDACzC,EAGF,IAAME,EAAiB,OAAO,KAAKF,EAAW,KAAK,EAC7CG,EAAgBD,EAAe,MAAM,EAAG,CAAC,EACzCE,EAAkB,OAAO,KAAKC,EAAeH,EAAe,MAAM,CAAC,CAAC,CAAC,EAC3E,GAAI,CAACE,EAAgB,OAAOD,CAAa,EACvC,MAAM,IAAIF,EACR,sBAAsBD,CAAS;AAAA;AAAA,qBAAmGI,EAAgB,SAChJ,KACF,CAAC;AAAA,kBAAqBD,EAAc,SAAS,KAAK,CAAC,EACrD,CAEJ,EAUaG,EACXC,GACY,CACZ,GAAIC,EAAUD,CAAO,EACnB,MAAO,GAGT,GAAI,CACF,OAAAR,EAAeQ,CAAO,EACf,EACT,MAAqB,CAErB,CAEA,MAAO,EACT",
  "names": ["bigEndianCrc32", "isNullish", "checkAccountId", "accountId", "InvalidAccountIDError", "toAccountBytes", "foundChecksum", "expectedCheckum", "bigEndianCrc32", "isIcpAccountIdentifier", "address", "isNullish"]
}
