{
  "version": 3,
  "sources": ["../../src/index.canister.ts", "../../candid/index.certified.idl.js", "../../candid/index.idl.js", "../../src/errors/index.errors.ts"],
  "sourcesContent": ["import {\n  Canister,\n  createServices,\n  toNullable,\n  type CanisterOptions,\n} from \"@dfinity/utils\";\nimport type {\n  GetAccountIdentifierTransactionsResponse,\n  _SERVICE as IndexService,\n} from \"../candid/index\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/index.certified.idl\";\nimport { idlFactory } from \"../candid/index.idl\";\nimport { MAINNET_INDEX_CANISTER_ID } from \"./constants/canister_ids\";\nimport { IndexError } from \"./errors/index.errors\";\nimport type { GetTransactionsParams } from \"./types/index.params\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport { paramToAccountIdentifierHex } from \"./utils/params.utils\";\n\nexport class IndexCanister extends Canister<IndexService> {\n  static create({\n    canisterId: optionsCanisterId,\n    ...options\n  }: CanisterOptions<IndexService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IndexService>({\n        options: {\n          ...options,\n          canisterId: optionsCanisterId ?? MAINNET_INDEX_CANISTER_ID,\n        },\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IndexCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   */\n  accountBalance = ({\n    certified,\n    accountIdentifier,\n  }: AccountBalanceParams): Promise<bigint> =>\n    this.caller({ certified }).get_account_identifier_balance(\n      paramToAccountIdentifierHex(accountIdentifier),\n    );\n\n  /**\n   * Returns the transactions and balance of an ICP account.\n   *\n   * @param {GetTransactionsParams} params The parameters to get the transactions.\n   * @param {boolean} params.certified query or update call.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {bigint} params.start If set then the results will start from the next most recent transaction id after start (start won't be included). If not provided, then the results will start from the most recent transaction id.\n   * @param {bigint} params.maxResults Maximum number of transactions to fetch.\n   * @returns {Promise<GetAccountIdentifierTransactionsResponse>} The transactions, balance and the transaction id of the oldest transaction the account has.\n   * @throws {@link IndexError}\n   */\n  getTransactions = async ({\n    certified,\n    accountIdentifier,\n    start,\n    maxResults: max_results,\n  }: GetTransactionsParams): Promise<GetAccountIdentifierTransactionsResponse> => {\n    const response = await this.caller({\n      certified,\n    }).get_account_identifier_transactions({\n      account_identifier: paramToAccountIdentifierHex(accountIdentifier),\n      start: toNullable(start),\n      max_results,\n    });\n\n    if (\"Err\" in response) {\n      throw new IndexError(response.Err.message);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const GetAccountIdentifierTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat64,\n    'start' : IDL.Opt(IDL.Nat64),\n    'account_identifier' : IDL.Text,\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : IDL.Text,\n    }),\n    'Burn' : IDL.Record({\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n    'Mint' : IDL.Record({ 'to' : IDL.Text, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : IDL.Nat64,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : Operation,\n    'timestamp' : IDL.Opt(TimeStamp),\n    'created_at_time' : IDL.Opt(TimeStamp),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : IDL.Nat64,\n    'transaction' : Transaction,\n  });\n  const GetAccountIdentifierTransactionsResponse = IDL.Record({\n    'balance' : IDL.Nat64,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAccountIdentifierTransactionsError = IDL.Record({\n    'message' : IDL.Text,\n  });\n  const GetAccountIdentifierTransactionsResult = IDL.Variant({\n    'Ok' : GetAccountIdentifierTransactionsResponse,\n    'Err' : GetAccountIdentifierTransactionsError,\n  });\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(IDL.Nat),\n    'account' : Account,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n  });\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n    'status_code' : IDL.Nat16,\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : IDL.Nat64 });\n  return IDL.Service({\n    'get_account_identifier_balance' : IDL.Func([IDL.Text], [IDL.Nat64], []),\n    'get_account_identifier_transactions' : IDL.Func(\n        [GetAccountIdentifierTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        [],\n      ),\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        [],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], []),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], []),\n    'icrc1_balance_of' : IDL.Func([Account], [IDL.Nat64], []),\n    'ledger_id' : IDL.Func([], [IDL.Principal], []),\n    'status' : IDL.Func([], [Status], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArg];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const GetAccountIdentifierTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat64,\n    'start' : IDL.Opt(IDL.Nat64),\n    'account_identifier' : IDL.Text,\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : IDL.Text,\n    }),\n    'Burn' : IDL.Record({\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n    'Mint' : IDL.Record({ 'to' : IDL.Text, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : IDL.Text,\n      'fee' : Tokens,\n      'from' : IDL.Text,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Text),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : IDL.Nat64,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : Operation,\n    'timestamp' : IDL.Opt(TimeStamp),\n    'created_at_time' : IDL.Opt(TimeStamp),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : IDL.Nat64,\n    'transaction' : Transaction,\n  });\n  const GetAccountIdentifierTransactionsResponse = IDL.Record({\n    'balance' : IDL.Nat64,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAccountIdentifierTransactionsError = IDL.Record({\n    'message' : IDL.Text,\n  });\n  const GetAccountIdentifierTransactionsResult = IDL.Variant({\n    'Ok' : GetAccountIdentifierTransactionsResponse,\n    'Err' : GetAccountIdentifierTransactionsError,\n  });\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(IDL.Nat),\n    'account' : Account,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n  });\n  const HttpRequest = IDL.Record({\n    'url' : IDL.Text,\n    'method' : IDL.Text,\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n  });\n  const HttpResponse = IDL.Record({\n    'body' : IDL.Vec(IDL.Nat8),\n    'headers' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n    'status_code' : IDL.Nat16,\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : IDL.Nat64 });\n  return IDL.Service({\n    'get_account_identifier_balance' : IDL.Func(\n        [IDL.Text],\n        [IDL.Nat64],\n        ['query'],\n      ),\n    'get_account_identifier_transactions' : IDL.Func(\n        [GetAccountIdentifierTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        ['query'],\n      ),\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetAccountIdentifierTransactionsResult],\n        ['query'],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], ['query']),\n    'http_request' : IDL.Func([HttpRequest], [HttpResponse], ['query']),\n    'icrc1_balance_of' : IDL.Func([Account], [IDL.Nat64], ['query']),\n    'ledger_id' : IDL.Func([], [IDL.Principal], ['query']),\n    'status' : IDL.Func([], [Status], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArg = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArg];\n};\n", "export class IndexError extends Error {}\n"],
  "mappings": "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",
  "names": ["Canister", "createServices", "toNullable", "idlFactory", "IDL", "InitArg", "GetAccountIdentifierTransactionsArgs", "Tokens", "TimeStamp", "Operation", "Transaction", "TransactionWithId", "GetAccountIdentifierTransactionsResponse", "GetAccountIdentifierTransactionsError", "GetAccountIdentifierTransactionsResult", "Account", "GetAccountTransactionsArgs", "GetBlocksRequest", "GetBlocksResponse", "HttpRequest", "HttpResponse", "Status", "idlFactory", "IDL", "InitArg", "GetAccountIdentifierTransactionsArgs", "Tokens", "TimeStamp", "Operation", "Transaction", "TransactionWithId", "GetAccountIdentifierTransactionsResponse", "GetAccountIdentifierTransactionsError", "GetAccountIdentifierTransactionsResult", "Account", "GetAccountTransactionsArgs", "GetBlocksRequest", "GetBlocksResponse", "HttpRequest", "HttpResponse", "Status", "IndexError", "IndexCanister", "_IndexCanister", "Canister", "optionsCanisterId", "options", "service", "certifiedService", "canisterId", "createServices", "MAINNET_INDEX_CANISTER_ID", "idlFactory", "certified", "accountIdentifier", "paramToAccountIdentifierHex", "start", "max_results", "response", "toNullable", "IndexError"]
}
