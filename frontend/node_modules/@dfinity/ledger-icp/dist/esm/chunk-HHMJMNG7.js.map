{
  "version": 3,
  "sources": ["../../src/ledger.canister.ts", "../../candid/ledger.certified.idl.js", "../../candid/ledger.idl.js", "../../src/canisters/ledger/ledger.request.converts.ts", "../../src/constants/constants.ts", "../../src/errors/ledger.errors.ts"],
  "sourcesContent": ["import type { Principal } from \"@dfinity/principal\";\nimport { Canister, createServices, type QueryParams } from \"@dfinity/utils\";\nimport type {\n  Icrc1BlockIndex,\n  _SERVICE as LedgerService,\n  Value,\n  icrc21_consent_info,\n} from \"../candid/ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory } from \"../candid/ledger.idl\";\nimport {\n  toIcrc1TransferRawRequest,\n  toIcrc21ConsentMessageRawRequest,\n  toIcrc2ApproveRawRequest,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport {\n  mapIcrc1TransferError,\n  mapIcrc21ConsentMessageError,\n  mapIcrc2ApproveError,\n  mapTransferError,\n} from \"./errors/ledger.errors\";\nimport type { BlockHeight } from \"./types/common\";\nimport type { LedgerCanisterOptions } from \"./types/ledger.options\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport type {\n  Icrc1TransferRequest,\n  Icrc21ConsentMessageRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"./types/ledger_converters\";\nimport { paramToAccountIdentifier } from \"./utils/params.utils\";\n\nexport class LedgerCanister extends Canister<LedgerService> {\n  public static create(options: LedgerCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const { service, certifiedService } = createServices<LedgerService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new LedgerCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier: accountIdentifierParam,\n    certified = true,\n  }: AccountBalanceParams): Promise<bigint> => {\n    const accountIdentifier = paramToAccountIdentifier(accountIdentifierParam);\n\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toUint8Array(),\n    });\n    return tokens.e8s;\n  };\n\n  /**\n   * Fetches the ledger metadata.\n   *\n   * @param {QueryParams} params - The parameters used to fetch the metadata, notably query or certified call.\n   * @returns {Promise<Array<[string, Value]>>} The metadata of the ICP ledger. A promise that resolves to an array of metadata entries, where each entry is a tuple consisting of a string and a value.\n   */\n  metadata = (params: QueryParams): Promise<Array<[string, Value]>> => {\n    const { icrc1_metadata } = this.caller(params);\n    return icrc1_metadata();\n  };\n\n  /**\n   * Returns the transaction fee of the ICP ledger canister.\n   *\n   * @param {QueryParams} [params={certified: false}] - Optional query parameters for the request, defaulting to `{ certified: false }` for backwards compatibility reason.\n   * @returns {Promise<bigint>} A promise that resolves to the transaction fee as a bigint.\n   */\n  public transactionFee = async (\n    params: QueryParams = { certified: false },\n  ): Promise<bigint> => {\n    const { transfer_fee } = this.caller(params);\n\n    const {\n      transfer_fee: { e8s },\n    } = await transfer_fee({});\n\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  // WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n  // relationship between the memo and the icrc1Memo of a transaction. The\n  // ICRC-1 interface simply cannot set the memo field and the non-ICRC-1\n  // interface cannot set the icrc1Memo field, even though the icrc1Memo field\n  // is called just \"memo\" in canister method params.\n  /**\n   * Transfer ICP from the caller to the destination `Account`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public icrc1Transfer = async (\n    request: Icrc1TransferRequest,\n  ): Promise<BlockHeight> => {\n    const rawRequest = toIcrc1TransferRawRequest(request);\n    const response = await this.certifiedService.icrc1_transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapIcrc1TransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  /**\n   * This method entitles the `spender` to transfer token `amount` on behalf of the caller from account `{ owner = caller; subaccount = from_subaccount }`.\n   *\n   * Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md#icrc2_approve\n   *\n   * @param {Icrc2ApproveRequest} params - The parameters to approve.\n   * @throws {ApproveError} If the approval fails.\n   * @returns {Promise<Icrc1BlockIndex>} The block index of the approved transaction.\n   */\n  icrc2Approve = async (\n    params: Icrc2ApproveRequest,\n  ): Promise<Icrc1BlockIndex> => {\n    const { icrc2_approve } = this.caller({ certified: true });\n\n    const response = await icrc2_approve(toIcrc2ApproveRawRequest(params));\n\n    if (\"Err\" in response) {\n      throw mapIcrc2ApproveError(response.Err);\n    }\n\n    return response.Ok;\n  };\n\n  /**\n   * Fetches the consent message for a specified canister call, intended to provide a human-readable message that helps users make informed decisions.\n   *\n   * @link: https://github.com/dfinity/wg-identity-authentication/blob/main/topics/ICRC-21/icrc_21_consent_msg.md\n   *\n   * @param {Icrc21ConsentMessageRequest} params - The request parameters containing the method name, arguments, and consent preferences (e.g., language).\n   * @returns {Promise<icrc21_consent_info>} - A promise that resolves to the consent message response, which includes the consent message in the specified language and other related information.\n   *\n   * @throws {InsufficientPaymentError} - This error is reserved for future use, in case payment extensions are introduced. For example, if consent messages, which are currently free, begin to require payments.\n   * @throws {UnsupportedCanisterCallError} - If the specified canister call is not supported.\n   * @throws {ConsentMessageUnavailableError} - If there is no consent message available.\n   * @throws {GenericError} - For any other generic errors.\n   */\n  icrc21ConsentMessage = async (\n    params: Icrc21ConsentMessageRequest,\n  ): Promise<icrc21_consent_info> => {\n    const { icrc21_canister_call_consent_message } = this.caller({\n      certified: true,\n    });\n\n    const response = await icrc21_canister_call_consent_message(\n      toIcrc21ConsentMessageRawRequest(params),\n    );\n\n    if (\"Err\" in response) {\n      throw mapIcrc21ConsentMessageError(response.Err);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'spender_subaccount' : IDL.Opt(SubAccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Icrc1Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Icrc1Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        [],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgsDfx], [Tokens], []),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_metadata' : IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, Value))], []),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], []),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'query_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        [],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'spender_subaccount' : IDL.Opt(SubAccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Icrc1Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Icrc1Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        ['query'],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'account_balance_dfx' : IDL.Func(\n        [AccountBalanceArgsDfx],\n        [Tokens],\n        ['query'],\n      ),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], ['query']),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, Value))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], ['query']),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], ['query']),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        ['query'],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "import {\n  arrayOfNumberToUint8Array,\n  isNullish,\n  toNullable,\n} from \"@dfinity/utils\";\nimport type {\n  TransferArg as Icrc1TransferRawRequest,\n  icrc21_consent_message_request as Icrc21ConsentMessageRawRequest,\n  ApproveArgs as Icrc2ApproveRawRequest,\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledger\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport type {\n  Icrc1TransferRequest,\n  Icrc21ConsentMessageRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"../../types/ledger_converters\";\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n  createdAt,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toUint8Array(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time:\n    createdAt !== undefined ? [{ timestamp_nanos: createdAt }] : [],\n  from_subaccount:\n    fromSubAccount === undefined\n      ? []\n      : [arrayOfNumberToUint8Array(fromSubAccount)],\n});\n\n// WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n// relationship between the memo and the icrc1Memo of a transaction. The ICRC-1\n// interface simply cannot set the memo field and the non-ICRC-1 interface\n// cannot set the icrc1Memo field, even though the icrc1Memo field is called\n// just \"memo\" in canister method params.\nexport const toIcrc1TransferRawRequest = ({\n  fromSubAccount,\n  to,\n  amount,\n  fee,\n  icrc1Memo,\n  createdAt,\n}: Icrc1TransferRequest): Icrc1TransferRawRequest => ({\n  to,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  amount,\n  memo: toNullable(icrc1Memo),\n  created_at_time: toNullable(createdAt),\n  from_subaccount: toNullable(fromSubAccount),\n});\n\nexport const toIcrc2ApproveRawRequest = ({\n  fee,\n  createdAt,\n  icrc1Memo,\n  fromSubAccount,\n  expected_allowance,\n  expires_at,\n  amount,\n  ...rest\n}: Icrc2ApproveRequest): Icrc2ApproveRawRequest => ({\n  ...rest,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  memo: toNullable(icrc1Memo),\n  from_subaccount: toNullable(fromSubAccount),\n  created_at_time: toNullable(createdAt),\n  amount,\n  expected_allowance: toNullable(expected_allowance),\n  expires_at: toNullable(expires_at),\n});\n\nexport const toIcrc21ConsentMessageRawRequest = ({\n  userPreferences: {\n    metadata: { utcOffsetMinutes, language },\n    deriveSpec,\n  },\n  ...rest\n}: Icrc21ConsentMessageRequest): Icrc21ConsentMessageRawRequest => ({\n  ...rest,\n  user_preferences: {\n    metadata: {\n      language,\n      utc_offset_minutes: toNullable(utcOffsetMinutes),\n    },\n    device_spec: isNullish(deriveSpec)\n      ? toNullable()\n      : toNullable(\n          \"GenericDisplay\" in deriveSpec\n            ? { GenericDisplay: null }\n            : {\n                LineDisplay: {\n                  characters_per_line: deriveSpec.LineDisplay.charactersPerLine,\n                  lines_per_page: deriveSpec.LineDisplay.linesPerPage,\n                },\n              },\n        ),\n  },\n});\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "import type {\n  Icrc1BlockIndex,\n  Icrc1Tokens,\n  icrc21_error as Icrc21RawError,\n  ApproveError as RawApproveError,\n  Icrc1TransferError as RawIcrc1TransferError,\n  TransferError as RawTransferError,\n} from \"../../candid/ledger\";\nimport type { BlockHeight } from \"../types/common\";\n\nexport class IcrcError extends Error {}\n\nexport class TransferError extends IcrcError {}\nexport class ApproveError extends IcrcError {}\nexport class ConsentMessageError extends IcrcError {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InvalidAccountIDError extends Error {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: bigint) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs?: number | undefined) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends IcrcError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport class GenericError extends ApproveError {\n  constructor(\n    public readonly message: string,\n    public readonly error_code: bigint,\n  ) {\n    super();\n  }\n}\n\nexport class TemporarilyUnavailableError extends ApproveError {}\n\nexport class DuplicateError extends ApproveError {\n  constructor(public readonly duplicateOf: Icrc1BlockIndex) {\n    super();\n  }\n}\n\nexport class AllowanceChangedError extends ApproveError {\n  constructor(public readonly currentAllowance: Icrc1Tokens) {\n    super();\n  }\n}\n\nexport class CreatedInFutureError extends ApproveError {}\nexport class TooOldError extends ApproveError {}\n\nexport class ExpiredError extends ApproveError {\n  constructor(public readonly ledgerTime: bigint) {\n    super();\n  }\n}\n\nexport class InsufficientPaymentError extends ConsentMessageError {}\nexport class UnsupportedCanisterCallError extends ConsentMessageError {}\nexport class ConsentMessageUnavailableError extends ConsentMessageError {}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError,\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance.e8s,\n    );\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos),\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc1TransferError = (\n  rawTransferError: RawIcrc1TransferError,\n): TransferError => {\n  if (\"Duplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.Duplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance,\n    );\n  }\n  if (\"CreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TooOld\" in rawTransferError) {\n    return new TxTooOldError();\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc2ApproveError = (\n  rawApproveError: RawApproveError,\n): ApproveError => {\n  /**\n   * export type ApproveError =\n   *   | { InsufficientFunds: { balance: Icrc1Tokens } };\n   */\n\n  if (\"GenericError\" in rawApproveError) {\n    return new GenericError(\n      rawApproveError.GenericError.message,\n      rawApproveError.GenericError.error_code,\n    );\n  }\n\n  if (\"TemporarilyUnavailable\" in rawApproveError) {\n    return new TemporarilyUnavailableError();\n  }\n\n  if (\"Duplicate\" in rawApproveError) {\n    return new DuplicateError(rawApproveError.Duplicate.duplicate_of);\n  }\n\n  if (\"BadFee\" in rawApproveError) {\n    return new BadFeeError(rawApproveError.BadFee.expected_fee);\n  }\n\n  if (\"AllowanceChanged\" in rawApproveError) {\n    return new AllowanceChangedError(\n      rawApproveError.AllowanceChanged.current_allowance,\n    );\n  }\n\n  if (\"CreatedInFuture\" in rawApproveError) {\n    return new CreatedInFutureError();\n  }\n\n  if (\"TooOld\" in rawApproveError) {\n    return new TooOldError();\n  }\n\n  if (\"Expired\" in rawApproveError) {\n    return new ExpiredError(rawApproveError.Expired.ledger_time);\n  }\n\n  if (\"InsufficientFunds\" in rawApproveError) {\n    return new InsufficientFundsError(\n      rawApproveError.InsufficientFunds.balance,\n    );\n  }\n\n  // Edge case\n  return new ApproveError(\n    `Unknown error type ${JSON.stringify(rawApproveError)}`,\n  );\n};\n\nexport const mapIcrc21ConsentMessageError = (\n  rawError: Icrc21RawError,\n): ConsentMessageError => {\n  if (\"GenericError\" in rawError) {\n    return new GenericError(\n      rawError.GenericError.description,\n      rawError.GenericError.error_code,\n    );\n  }\n\n  if (\"InsufficientPayment\" in rawError) {\n    return new InsufficientPaymentError(\n      rawError.InsufficientPayment.description,\n    );\n  }\n\n  if (\"UnsupportedCanisterCall\" in rawError) {\n    return new UnsupportedCanisterCallError(\n      rawError.UnsupportedCanisterCall.description,\n    );\n  }\n  if (\"ConsentMessageUnavailable\" in rawError) {\n    return new ConsentMessageUnavailableError(\n      rawError.ConsentMessageUnavailable.description,\n    );\n  }\n\n  // Edge case\n  return new ConsentMessageError(\n    `Unknown error type ${JSON.stringify(rawError)}`,\n  );\n};\n"],
  "mappings": "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",
  "names": ["Canister", "createServices", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "BlockIndex", "GetBlocksArgs", "Memo", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "BlockIndex", "GetBlocksArgs", "Memo", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "arrayOfNumberToUint8Array", "isNullish", "toNullable", "CREATE_CANISTER_MEMO", "TOP_UP_CANISTER_MEMO", "TRANSACTION_FEE", "E8S_PER_TOKEN", "e8sToTokens", "e8s", "toTransferRawRequest", "to", "amount", "memo", "fee", "fromSubAccount", "createdAt", "TRANSACTION_FEE", "arrayOfNumberToUint8Array", "toIcrc1TransferRawRequest", "icrc1Memo", "toNullable", "toIcrc2ApproveRawRequest", "expected_allowance", "expires_at", "rest", "toIcrc21ConsentMessageRawRequest", "utcOffsetMinutes", "language", "deriveSpec", "isNullish", "IcrcError", "TransferError", "ApproveError", "ConsentMessageError", "InvalidSenderError", "InvalidAccountIDError", "InsufficientFundsError", "balance", "TxTooOldError", "allowed_window_secs", "TxCreatedInFutureError", "TxDuplicateError", "duplicateOf", "BadFeeError", "expectedFee", "GenericError", "message", "error_code", "TemporarilyUnavailableError", "DuplicateError", "AllowanceChangedError", "currentAllowance", "CreatedInFutureError", "TooOldError", "ExpiredError", "ledgerTime", "InsufficientPaymentError", "UnsupportedCanisterCallError", "ConsentMessageUnavailableError", "mapTransferError", "rawTransferError", "mapIcrc1TransferError", "mapIcrc2ApproveError", "rawApproveError", "mapIcrc21ConsentMessageError", "rawError", "LedgerCanister", "_LedgerCanister", "Canister", "options", "canisterId", "MAINNET_LEDGER_CANISTER_ID", "service", "certifiedService", "createServices", "idlFactory", "accountIdentifierParam", "certified", "accountIdentifier", "paramToAccountIdentifier", "params", "icrc1_metadata", "transfer_fee", "e8s", "request", "rawRequest", "toTransferRawRequest", "response", "mapTransferError", "toIcrc1TransferRawRequest", "mapIcrc1TransferError", "icrc2_approve", "toIcrc2ApproveRawRequest", "mapIcrc2ApproveError", "icrc21_canister_call_consent_message", "toIcrc21ConsentMessageRawRequest", "mapIcrc21ConsentMessageError"]
}
