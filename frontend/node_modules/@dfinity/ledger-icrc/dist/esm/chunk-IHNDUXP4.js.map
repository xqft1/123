{
  "version": 3,
  "sources": ["../../src/index-ng.canister.ts", "../../candid/icrc_index-ng.certified.idl.js", "../../candid/icrc_index-ng.idl.js"],
  "sourcesContent": ["import type { Principal } from \"@dfinity/principal\";\nimport { createServices, type QueryParams } from \"@dfinity/utils\";\nimport type { SubAccount } from \"../candid/icrc_index\";\nimport type {\n  GetTransactions,\n  _SERVICE as IcrcIndexNgService,\n  Status,\n} from \"../candid/icrc_index-ng\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/icrc_index-ng.certified.idl\";\nimport { idlFactory } from \"../candid/icrc_index-ng.idl\";\nimport { IcrcCanister } from \"./canister\";\nimport {\n  toGetTransactionsArgs,\n  toListSubaccountsParams,\n} from \"./converters/index.converters\";\nimport { IndexError } from \"./errors/index.errors\";\nimport type { IcrcLedgerCanisterOptions } from \"./types/canister.options\";\nimport type {\n  GetIndexNgAccountTransactionsParams,\n  ListSubaccountsParams,\n} from \"./types/index-ng.params\";\n\nexport class IcrcIndexNgCanister extends IcrcCanister<IcrcIndexNgService> {\n  static create(options: IcrcLedgerCanisterOptions<IcrcIndexNgService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IcrcIndexNgService>({\n        options,\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IcrcIndexNgCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Get the transactions of an account\n   *\n   * Always certified.\n   * `get_account_transactions` needs to be called with an update\n   * because the index canisters makes a call to the ledger canister to get the transaction data.\n   * Index Canister only holds the transactions ids in state, not the whole transaction data.\n   */\n  /**\n   * Get the transactions of an account.\n   *\n   * @param {GetAccountTransactionsParams} params The parameters to get the transactions of an account.\n   * @returns {Promise<GetTransactions>} The list of transactions and further related information of the given account.\n   */\n  getTransactions = async ({\n    certified,\n    ...rest\n  }: GetIndexNgAccountTransactionsParams): Promise<GetTransactions> => {\n    const response = await this.caller({\n      certified,\n    }).get_account_transactions(toGetTransactionsArgs(rest));\n\n    if (\"Err\" in response) {\n      throw new IndexError(response.Err.message);\n    }\n\n    return response.Ok;\n  };\n\n  /**\n   * Returns the ledger canister ID related to the index canister.\n   */\n  ledgerId = (params: QueryParams): Promise<Principal> => {\n    const { ledger_id } = this.caller(params);\n    return ledger_id();\n  };\n\n  /**\n   * Returns the status of the index canister.\n   *\n   * @param {QueryParams} params The parameters to get the status of the index canister.\n   * @returns {Promise<Status>} The status of the index canister.\n   */\n  status = (params: QueryParams): Promise<Status> =>\n    this.caller(params).status();\n\n  /**\n   * Returns the list of subaccounts for a given owner.\n   *\n   * @param {ListSubaccountsParams} params The parameters to get the list of subaccounts.\n   * @returns {Promise<Array<SubAccount>>} The list of subaccounts.\n   */\n  listSubaccounts = ({\n    certified,\n    ...rest\n  }: ListSubaccountsParams): Promise<Array<SubAccount>> =>\n    this.caller({ certified }).list_subaccounts(toListSubaccountsParams(rest));\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icrc/candid/icrc_index-ng.did */\nexport const idlFactory = ({ IDL }) => {\n  const Value = IDL.Rec();\n  const UpgradeArg = IDL.Record({\n    'ledger_id' : IDL.Opt(IDL.Principal),\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const InitArg = IDL.Record({\n    'ledger_id' : IDL.Principal,\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const IndexArg = IDL.Variant({ 'Upgrade' : UpgradeArg, 'Init' : InitArg });\n  const BlockIndex = IDL.Nat;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(BlockIndex),\n    'account' : Account,\n  });\n  const Tokens = IDL.Nat;\n  const Burn = IDL.Record({\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n    'spender' : IDL.Opt(Account),\n  });\n  const Mint = IDL.Record({\n    'to' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n  });\n  const Approve = IDL.Record({\n    'fee' : IDL.Opt(Tokens),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n    'expected_allowance' : IDL.Opt(Tokens),\n    'expires_at' : IDL.Opt(IDL.Nat64),\n    'spender' : Account,\n  });\n  const Transfer = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n    'spender' : IDL.Opt(Account),\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(Burn),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(Mint),\n    'approve' : IDL.Opt(Approve),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(Transfer),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : BlockIndex,\n    'transaction' : Transaction,\n  });\n  const GetTransactions = IDL.Record({\n    'balance' : Tokens,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(BlockIndex),\n  });\n  const GetTransactionsErr = IDL.Record({ 'message' : IDL.Text });\n  const GetTransactionsResult = IDL.Variant({\n    'Ok' : GetTransactions,\n    'Err' : GetTransactionsErr,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const Map = IDL.Vec(IDL.Tuple(IDL.Text, Value));\n  Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : Map,\n      'Nat' : IDL.Nat,\n      'Nat64' : IDL.Nat64,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(Value),\n    })\n  );\n  const Block = Value;\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n  });\n  const FeeCollectorRanges = IDL.Record({\n    'ranges' : IDL.Vec(\n      IDL.Tuple(Account, IDL.Vec(IDL.Tuple(BlockIndex, BlockIndex)))\n    ),\n  });\n  const ListSubaccountsArgs = IDL.Record({\n    'owner' : IDL.Principal,\n    'start' : IDL.Opt(SubAccount),\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : BlockIndex });\n  return IDL.Service({\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetTransactionsResult],\n        [],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], []),\n    'get_fee_collectors_ranges' : IDL.Func([], [FeeCollectorRanges], []),\n    'icrc1_balance_of' : IDL.Func([Account], [Tokens], []),\n    'ledger_id' : IDL.Func([], [IDL.Principal], []),\n    'list_subaccounts' : IDL.Func(\n        [ListSubaccountsArgs],\n        [IDL.Vec(SubAccount)],\n        [],\n      ),\n    'status' : IDL.Func([], [Status], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const UpgradeArg = IDL.Record({\n    'ledger_id' : IDL.Opt(IDL.Principal),\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const InitArg = IDL.Record({\n    'ledger_id' : IDL.Principal,\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const IndexArg = IDL.Variant({ 'Upgrade' : UpgradeArg, 'Init' : InitArg });\n  return [IDL.Opt(IndexArg)];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icrc/candid/icrc_index-ng.did */\nexport const idlFactory = ({ IDL }) => {\n  const Value = IDL.Rec();\n  const UpgradeArg = IDL.Record({\n    'ledger_id' : IDL.Opt(IDL.Principal),\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const InitArg = IDL.Record({\n    'ledger_id' : IDL.Principal,\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const IndexArg = IDL.Variant({ 'Upgrade' : UpgradeArg, 'Init' : InitArg });\n  const BlockIndex = IDL.Nat;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(BlockIndex),\n    'account' : Account,\n  });\n  const Tokens = IDL.Nat;\n  const Burn = IDL.Record({\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n    'spender' : IDL.Opt(Account),\n  });\n  const Mint = IDL.Record({\n    'to' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n  });\n  const Approve = IDL.Record({\n    'fee' : IDL.Opt(Tokens),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n    'expected_allowance' : IDL.Opt(Tokens),\n    'expires_at' : IDL.Opt(IDL.Nat64),\n    'spender' : Account,\n  });\n  const Transfer = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : Tokens,\n    'spender' : IDL.Opt(Account),\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(Burn),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(Mint),\n    'approve' : IDL.Opt(Approve),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(Transfer),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : BlockIndex,\n    'transaction' : Transaction,\n  });\n  const GetTransactions = IDL.Record({\n    'balance' : Tokens,\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(BlockIndex),\n  });\n  const GetTransactionsErr = IDL.Record({ 'message' : IDL.Text });\n  const GetTransactionsResult = IDL.Variant({\n    'Ok' : GetTransactions,\n    'Err' : GetTransactionsErr,\n  });\n  const GetBlocksRequest = IDL.Record({\n    'start' : IDL.Nat,\n    'length' : IDL.Nat,\n  });\n  const Map = IDL.Vec(IDL.Tuple(IDL.Text, Value));\n  Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : Map,\n      'Nat' : IDL.Nat,\n      'Nat64' : IDL.Nat64,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(Value),\n    })\n  );\n  const Block = Value;\n  const GetBlocksResponse = IDL.Record({\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n  });\n  const FeeCollectorRanges = IDL.Record({\n    'ranges' : IDL.Vec(\n      IDL.Tuple(Account, IDL.Vec(IDL.Tuple(BlockIndex, BlockIndex)))\n    ),\n  });\n  const ListSubaccountsArgs = IDL.Record({\n    'owner' : IDL.Principal,\n    'start' : IDL.Opt(SubAccount),\n  });\n  const Status = IDL.Record({ 'num_blocks_synced' : BlockIndex });\n  return IDL.Service({\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetTransactionsResult],\n        ['query'],\n      ),\n    'get_blocks' : IDL.Func([GetBlocksRequest], [GetBlocksResponse], ['query']),\n    'get_fee_collectors_ranges' : IDL.Func([], [FeeCollectorRanges], ['query']),\n    'icrc1_balance_of' : IDL.Func([Account], [Tokens], ['query']),\n    'ledger_id' : IDL.Func([], [IDL.Principal], ['query']),\n    'list_subaccounts' : IDL.Func(\n        [ListSubaccountsArgs],\n        [IDL.Vec(SubAccount)],\n        ['query'],\n      ),\n    'status' : IDL.Func([], [Status], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const UpgradeArg = IDL.Record({\n    'ledger_id' : IDL.Opt(IDL.Principal),\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const InitArg = IDL.Record({\n    'ledger_id' : IDL.Principal,\n    'retrieve_blocks_from_ledger_interval_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const IndexArg = IDL.Variant({ 'Upgrade' : UpgradeArg, 'Init' : InitArg });\n  return [IDL.Opt(IndexArg)];\n};\n"],
  "mappings": "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",
  "names": ["createServices", "idlFactory", "IDL", "Value", "UpgradeArg", "InitArg", "IndexArg", "BlockIndex", "SubAccount", "Account", "GetAccountTransactionsArgs", "Tokens", "Burn", "Mint", "Approve", "Transfer", "Transaction", "TransactionWithId", "GetTransactions", "GetTransactionsErr", "GetTransactionsResult", "GetBlocksRequest", "Map", "Block", "GetBlocksResponse", "FeeCollectorRanges", "ListSubaccountsArgs", "Status", "idlFactory", "IDL", "Value", "UpgradeArg", "InitArg", "IndexArg", "BlockIndex", "SubAccount", "Account", "GetAccountTransactionsArgs", "Tokens", "Burn", "Mint", "Approve", "Transfer", "Transaction", "TransactionWithId", "GetTransactions", "GetTransactionsErr", "GetTransactionsResult", "GetBlocksRequest", "Map", "Block", "GetBlocksResponse", "FeeCollectorRanges", "ListSubaccountsArgs", "Status", "IcrcIndexNgCanister", "_IcrcIndexNgCanister", "IcrcCanister", "options", "service", "certifiedService", "canisterId", "createServices", "idlFactory", "certified", "rest", "response", "toGetTransactionsArgs", "IndexError", "params", "ledger_id", "toListSubaccountsParams"]
}
