{
  "version": 3,
  "sources": ["../../src/ledger.canister.ts", "../../candid/icrc_ledger.certified.idl.js", "../../candid/icrc_ledger.idl.js", "../../src/converters/ledger.converters.ts", "../../src/errors/ledger.errors.ts"],
  "sourcesContent": ["import type { Principal } from \"@dfinity/principal\";\nimport {\n  Canister,\n  createServices,\n  toNullable,\n  type QueryParams,\n} from \"@dfinity/utils\";\nimport type {\n  Allowance,\n  BlockIndex,\n  GetBlocksResult,\n  _SERVICE as IcrcLedgerService,\n  Tokens,\n  icrc21_consent_info,\n} from \"../candid/icrc_ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/icrc_ledger.certified.idl\";\nimport { idlFactory } from \"../candid/icrc_ledger.idl\";\nimport {\n  toApproveArgs,\n  toIcrc21ConsentMessageArgs,\n  toTransferArg,\n  toTransferFromArgs,\n} from \"./converters/ledger.converters\";\nimport {\n  IcrcTransferError,\n  mapIcrc106GetIndexPrincipalError,\n  mapIcrc21ConsentMessageError,\n} from \"./errors/ledger.errors\";\nimport type { IcrcLedgerCanisterOptions } from \"./types/canister.options\";\nimport type {\n  AllowanceParams,\n  ApproveParams,\n  BalanceParams,\n  GetBlocksParams,\n  Icrc21ConsentMessageParams,\n  TransferFromParams,\n  TransferParams,\n} from \"./types/ledger.params\";\nimport type { IcrcTokenMetadataResponse } from \"./types/ledger.responses\";\n\nexport class IcrcLedgerCanister extends Canister<IcrcLedgerService> {\n  static create(options: IcrcLedgerCanisterOptions<IcrcLedgerService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IcrcLedgerService>({\n        options,\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IcrcLedgerCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * The token metadata (name, symbol, etc.).\n   */\n  metadata = (params: QueryParams): Promise<IcrcTokenMetadataResponse> =>\n    this.caller(params).icrc1_metadata();\n\n  /**\n   * The ledger transaction fees.\n   *\n   * @returns {Tokens} The ledger transaction fees in Tokens\n   */\n  transactionFee = (params: QueryParams): Promise<Tokens> =>\n    this.caller(params).icrc1_fee();\n\n  /**\n   * Returns the balance for a given account provided as owner and with optional subaccount.\n   *\n   * @param {BalanceParams} params The parameters to get the balance of an account.\n   * @returns {Promise<Tokens>} The balance of the given account.\n   */\n  balance = (params: BalanceParams): Promise<Tokens> =>\n    this.caller({ certified: params.certified }).icrc1_balance_of({\n      owner: params.owner,\n      subaccount: toNullable(params.subaccount),\n    });\n\n  /**\n   * Transfers tokens from the sender to the given account.\n   *\n   * @param {TransferArg} params The parameters to transfer tokens.\n   *\n   * @throws {IcrcTransferError} If the transfer fails.\n   */\n  transfer = async (params: TransferParams): Promise<BlockIndex> => {\n    const response = await this.caller({ certified: true }).icrc1_transfer(\n      toTransferArg(params),\n    );\n    if (\"Err\" in response) {\n      throw new IcrcTransferError({\n        errorType: response.Err,\n        msg: \"Failed to transfer\",\n      });\n    }\n    return response.Ok;\n  };\n\n  /**\n   * Returns the total supply of tokens.\n   */\n  totalTokensSupply = (params: QueryParams): Promise<Tokens> =>\n    this.caller(params).icrc1_total_supply();\n\n  /**\n   * Transfers a token amount from the `from` account to the `to` account using the allowance of the spender's account (`SpenderAccount = { owner = caller; subaccount = spender_subaccount }`). The ledger draws the fees from the `from` account.\n   *\n   * Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md#icrc2_transfer_from\n   *\n   * @param {TransferFromParams} params The parameters to transfer tokens from to.\n   *\n   * @throws {IcrcTransferError} If the transfer from fails.\n   */\n  transferFrom = async (params: TransferFromParams): Promise<BlockIndex> => {\n    const response = await this.caller({ certified: true }).icrc2_transfer_from(\n      toTransferFromArgs(params),\n    );\n    if (\"Err\" in response) {\n      throw new IcrcTransferError({\n        errorType: response.Err,\n        msg: \"Failed to transfer from\",\n      });\n    }\n    return response.Ok;\n  };\n\n  /**\n   * This method entitles the `spender` to transfer token `amount` on behalf of the caller from account `{ owner = caller; subaccount = from_subaccount }`.\n   *\n   * Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md#icrc2_approve\n   *\n   * @param {ApproveParams} params The parameters to approve.\n   *\n   * @throws {IcrcTransferError} If the approval fails.\n   */\n  approve = async (params: ApproveParams): Promise<BlockIndex> => {\n    const response = await this.caller({ certified: true }).icrc2_approve(\n      toApproveArgs(params),\n    );\n    if (\"Err\" in response) {\n      throw new IcrcTransferError({\n        errorType: response.Err,\n        msg: \"Failed to entitle the spender to transfer the amount\",\n      });\n    }\n    return response.Ok;\n  };\n\n  /**\n   * Returns the token allowance that the `spender` account can transfer from the specified `account`, and the expiration time for that allowance, if any.\n   *\n   * Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md#icrc2_allowance\n   *\n   * @param {AllowanceParams} params The parameters to call the allowance.\n   *\n   * @returns {Allowance} The token allowance. If there is no active approval, the ledger MUST return `{ allowance = 0; expires_at = null }`.\n   */\n  allowance = (params: AllowanceParams): Promise<Allowance> => {\n    const { certified, ...rest } = params;\n    return this.caller({ certified }).icrc2_allowance({ ...rest });\n  };\n\n  /**\n   * Fetches the consent message for a specified canister call, intended to provide a human-readable message that helps users make informed decisions.\n   *\n   * @link: https://github.com/dfinity/wg-identity-authentication/blob/main/topics/ICRC-21/icrc_21_consent_msg.md\n   *\n   * @param {Icrc21ConsentMessageParams} params - The request parameters containing the method name, arguments, and consent preferences (e.g., language).\n   * @returns {Promise<icrc21_consent_info>} - A promise that resolves to the consent message response, which includes the consent message in the specified language and other related information.\n   *\n   * @throws {InsufficientPaymentError} - This error is reserved for future use, in case payment extensions are introduced. For example, if consent messages, which are currently free, begin to require payments.\n   * @throws {UnsupportedCanisterCallError} - If the specified canister call is not supported.\n   * @throws {ConsentMessageUnavailableError} - If there is no consent message available.\n   * @throws {GenericError} - For any other generic errors.\n   */\n  consentMessage = async (\n    params: Icrc21ConsentMessageParams,\n  ): Promise<icrc21_consent_info> => {\n    const { icrc21_canister_call_consent_message } = this.caller({\n      certified: true,\n    });\n\n    const response = await icrc21_canister_call_consent_message(\n      toIcrc21ConsentMessageArgs(params),\n    );\n\n    if (\"Err\" in response) {\n      throw mapIcrc21ConsentMessageError(response.Err);\n    }\n\n    return response.Ok;\n  };\n\n  /**\n   * Fetches the blocks information from the ledger canister,\n   *\n   * @param {GetBlocksParams} params The parameters to get the blocks.\n   * @returns {Promise<GetBlocksResult>} The list of blocks.\n   */\n  getBlocks = (params: GetBlocksParams): Promise<GetBlocksResult> =>\n    this.caller({ certified: params.certified }).icrc3_get_blocks(params.args);\n\n  /**\n   * Returns the principal of the index canister for the ledger, if one was defined as such.\n   *\n   * @link: https://github.com/dfinity/ICRC/blob/main/ICRCs/ICRC-106/ICRC-106.md\n   *\n   * @returns {Promise<Principal>} The principal of the index canister.\n   *\n   * @throws {GenericError} - For any errors that occur while fetching the index principal.\n   * @throws {IndexPrincipalNotSetError} - If the index principal was not set for the ledger canister.\n   */\n  getIndexPrincipal = async (params: QueryParams): Promise<Principal> => {\n    const { icrc106_get_index_principal } = this.caller(params);\n\n    const response = await icrc106_get_index_principal();\n\n    if (\"Err\" in response) {\n      throw mapIcrc106GetIndexPrincipalError(response.Err);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icrc/candid/icrc_ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const GetBlocksResult = IDL.Rec();\n  const ICRC3Value = IDL.Rec();\n  const Value = IDL.Rec();\n  const ChangeArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Opt(IDL.Nat64),\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Opt(IDL.Nat64),\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Opt(IDL.Principal),\n  });\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'change_archive_options' : IDL.Opt(ChangeArchiveOptions),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const InitArgs = IDL.Record({\n    'decimals' : IDL.Opt(IDL.Nat8),\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n      'trigger_threshold' : IDL.Nat64,\n      'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Text,\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat;\n  const ArchiveInfo = IDL.Record({\n    'block_range_end' : BlockIndex,\n    'canister_id' : IDL.Principal,\n    'block_range_start' : BlockIndex,\n  });\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat,\n  });\n  const Map = IDL.Vec(IDL.Tuple(IDL.Text, Value));\n  Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : Map,\n      'Nat' : IDL.Nat,\n      'Nat64' : IDL.Nat64,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(Value),\n    })\n  );\n  const Block = Value;\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryBlockArchiveFn = IDL.Func([GetBlocksArgs], [BlockRange], []);\n  const GetBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'first_index' : BlockIndex,\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryBlockArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const DataCertificate = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  const TxIndex = IDL.Nat;\n  const GetTransactionsRequest = IDL.Record({\n    'start' : TxIndex,\n    'length' : IDL.Nat,\n  });\n  const Timestamp = IDL.Nat64;\n  const Burn = IDL.Record({\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Mint = IDL.Record({\n    'to' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n  });\n  const Approve = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'expected_allowance' : IDL.Opt(IDL.Nat),\n    'expires_at' : IDL.Opt(Timestamp),\n    'spender' : Account,\n  });\n  const Transfer = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(Burn),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(Mint),\n    'approve' : IDL.Opt(Approve),\n    'timestamp' : Timestamp,\n    'transfer' : IDL.Opt(Transfer),\n  });\n  const TransactionRange = IDL.Record({\n    'transactions' : IDL.Vec(Transaction),\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetTransactionsRequest],\n      [TransactionRange],\n      [],\n    );\n  const GetTransactionsResponse = IDL.Record({\n    'first_index' : TxIndex,\n    'log_length' : IDL.Nat,\n    'transactions' : IDL.Vec(Transaction),\n    'archived_transactions' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : TxIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const GetAllowancesArgs = IDL.Record({\n    'take' : IDL.Opt(IDL.Nat),\n    'prev_spender' : IDL.Opt(Account),\n    'from_account' : IDL.Opt(Account),\n  });\n  const Allowance103 = IDL.Record({\n    'from_account' : Account,\n    'to_spender' : Account,\n    'allowance' : IDL.Nat,\n    'expires_at' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAllowancesError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'AccessDenied' : IDL.Record({ 'reason' : IDL.Text }),\n  });\n  const icrc103_get_allowances_response = IDL.Variant({\n    'Ok' : IDL.Vec(Allowance103),\n    'Err' : GetAllowancesError,\n  });\n  const GetIndexPrincipalError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'IndexPrincipalNotSet' : IDL.Null,\n  });\n  const GetIndexPrincipalResult = IDL.Variant({\n    'Ok' : IDL.Principal,\n    'Err' : GetIndexPrincipalError,\n  });\n  const Tokens = IDL.Nat;\n  const StandardRecord = IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text });\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : IDL.Nat,\n    'expires_at' : IDL.Opt(Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'expected_allowance' : IDL.Opt(IDL.Nat),\n    'expires_at' : IDL.Opt(Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'spender_subaccount' : IDL.Opt(Subaccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const GetArchivesArgs = IDL.Record({ 'from' : IDL.Opt(IDL.Principal) });\n  const GetArchivesResult = IDL.Vec(\n    IDL.Record({\n      'end' : IDL.Nat,\n      'canister_id' : IDL.Principal,\n      'start' : IDL.Nat,\n    })\n  );\n  ICRC3Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : IDL.Vec(IDL.Tuple(IDL.Text, ICRC3Value)),\n      'Nat' : IDL.Nat,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(ICRC3Value),\n    })\n  );\n  GetBlocksResult.fill(\n    IDL.Record({\n      'log_length' : IDL.Nat,\n      'blocks' : IDL.Vec(IDL.Record({ 'id' : IDL.Nat, 'block' : ICRC3Value })),\n      'archived_blocks' : IDL.Vec(\n        IDL.Record({\n          'args' : IDL.Vec(GetBlocksArgs),\n          'callback' : IDL.Func(\n              [IDL.Vec(GetBlocksArgs)],\n              [GetBlocksResult],\n              [],\n            ),\n        })\n      ),\n    })\n  );\n  const ICRC3DataCertificate = IDL.Record({\n    'certificate' : IDL.Vec(IDL.Nat8),\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  return IDL.Service({\n    'archives' : IDL.Func([], [IDL.Vec(ArchiveInfo)], []),\n    'get_blocks' : IDL.Func([GetBlocksArgs], [GetBlocksResponse], []),\n    'get_data_certificate' : IDL.Func([], [DataCertificate], []),\n    'get_transactions' : IDL.Func(\n        [GetTransactionsRequest],\n        [GetTransactionsResponse],\n        [],\n      ),\n    'icrc103_get_allowances' : IDL.Func(\n        [GetAllowancesArgs],\n        [icrc103_get_allowances_response],\n        [],\n      ),\n    'icrc106_get_index_principal' : IDL.Func([], [GetIndexPrincipalResult], []),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Tokens], []),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))],\n        [],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func([], [IDL.Vec(StandardRecord)], []),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], []),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'icrc3_get_archives' : IDL.Func([GetArchivesArgs], [GetArchivesResult], []),\n    'icrc3_get_blocks' : IDL.Func(\n        [IDL.Vec(GetBlocksArgs)],\n        [GetBlocksResult],\n        [],\n      ),\n    'icrc3_get_tip_certificate' : IDL.Func(\n        [],\n        [IDL.Opt(ICRC3DataCertificate)],\n        [],\n      ),\n    'icrc3_supported_block_types' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'block_type' : IDL.Text }))],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const ChangeArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Opt(IDL.Nat64),\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Opt(IDL.Nat64),\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Opt(IDL.Principal),\n  });\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'change_archive_options' : IDL.Opt(ChangeArchiveOptions),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const InitArgs = IDL.Record({\n    'decimals' : IDL.Opt(IDL.Nat8),\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n      'trigger_threshold' : IDL.Nat64,\n      'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Text,\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerArg];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icrc/candid/icrc_ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const GetBlocksResult = IDL.Rec();\n  const ICRC3Value = IDL.Rec();\n  const Value = IDL.Rec();\n  const ChangeArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Opt(IDL.Nat64),\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Opt(IDL.Nat64),\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Opt(IDL.Principal),\n  });\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'change_archive_options' : IDL.Opt(ChangeArchiveOptions),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const InitArgs = IDL.Record({\n    'decimals' : IDL.Opt(IDL.Nat8),\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n      'trigger_threshold' : IDL.Nat64,\n      'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Text,\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat;\n  const ArchiveInfo = IDL.Record({\n    'block_range_end' : BlockIndex,\n    'canister_id' : IDL.Principal,\n    'block_range_start' : BlockIndex,\n  });\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat,\n  });\n  const Map = IDL.Vec(IDL.Tuple(IDL.Text, Value));\n  Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : Map,\n      'Nat' : IDL.Nat,\n      'Nat64' : IDL.Nat64,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(Value),\n    })\n  );\n  const Block = Value;\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryBlockArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [BlockRange],\n      ['query'],\n    );\n  const GetBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'first_index' : BlockIndex,\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryBlockArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const DataCertificate = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  const TxIndex = IDL.Nat;\n  const GetTransactionsRequest = IDL.Record({\n    'start' : TxIndex,\n    'length' : IDL.Nat,\n  });\n  const Timestamp = IDL.Nat64;\n  const Burn = IDL.Record({\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Mint = IDL.Record({\n    'to' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n  });\n  const Approve = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'expected_allowance' : IDL.Opt(IDL.Nat),\n    'expires_at' : IDL.Opt(Timestamp),\n    'spender' : Account,\n  });\n  const Transfer = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(Burn),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(Mint),\n    'approve' : IDL.Opt(Approve),\n    'timestamp' : Timestamp,\n    'transfer' : IDL.Opt(Transfer),\n  });\n  const TransactionRange = IDL.Record({\n    'transactions' : IDL.Vec(Transaction),\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetTransactionsRequest],\n      [TransactionRange],\n      ['query'],\n    );\n  const GetTransactionsResponse = IDL.Record({\n    'first_index' : TxIndex,\n    'log_length' : IDL.Nat,\n    'transactions' : IDL.Vec(Transaction),\n    'archived_transactions' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : TxIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const GetAllowancesArgs = IDL.Record({\n    'take' : IDL.Opt(IDL.Nat),\n    'prev_spender' : IDL.Opt(Account),\n    'from_account' : IDL.Opt(Account),\n  });\n  const Allowance103 = IDL.Record({\n    'from_account' : Account,\n    'to_spender' : Account,\n    'allowance' : IDL.Nat,\n    'expires_at' : IDL.Opt(IDL.Nat64),\n  });\n  const GetAllowancesError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'AccessDenied' : IDL.Record({ 'reason' : IDL.Text }),\n  });\n  const icrc103_get_allowances_response = IDL.Variant({\n    'Ok' : IDL.Vec(Allowance103),\n    'Err' : GetAllowancesError,\n  });\n  const GetIndexPrincipalError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'IndexPrincipalNotSet' : IDL.Null,\n  });\n  const GetIndexPrincipalResult = IDL.Variant({\n    'Ok' : IDL.Principal,\n    'Err' : GetIndexPrincipalError,\n  });\n  const Tokens = IDL.Nat;\n  const StandardRecord = IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text });\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : IDL.Nat,\n    'expires_at' : IDL.Opt(Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : IDL.Nat,\n    'expected_allowance' : IDL.Opt(IDL.Nat),\n    'expires_at' : IDL.Opt(Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'spender_subaccount' : IDL.Opt(Subaccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const GetArchivesArgs = IDL.Record({ 'from' : IDL.Opt(IDL.Principal) });\n  const GetArchivesResult = IDL.Vec(\n    IDL.Record({\n      'end' : IDL.Nat,\n      'canister_id' : IDL.Principal,\n      'start' : IDL.Nat,\n    })\n  );\n  ICRC3Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : IDL.Vec(IDL.Tuple(IDL.Text, ICRC3Value)),\n      'Nat' : IDL.Nat,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(ICRC3Value),\n    })\n  );\n  GetBlocksResult.fill(\n    IDL.Record({\n      'log_length' : IDL.Nat,\n      'blocks' : IDL.Vec(IDL.Record({ 'id' : IDL.Nat, 'block' : ICRC3Value })),\n      'archived_blocks' : IDL.Vec(\n        IDL.Record({\n          'args' : IDL.Vec(GetBlocksArgs),\n          'callback' : IDL.Func(\n              [IDL.Vec(GetBlocksArgs)],\n              [GetBlocksResult],\n              ['query'],\n            ),\n        })\n      ),\n    })\n  );\n  const ICRC3DataCertificate = IDL.Record({\n    'certificate' : IDL.Vec(IDL.Nat8),\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  return IDL.Service({\n    'archives' : IDL.Func([], [IDL.Vec(ArchiveInfo)], ['query']),\n    'get_blocks' : IDL.Func([GetBlocksArgs], [GetBlocksResponse], ['query']),\n    'get_data_certificate' : IDL.Func([], [DataCertificate], ['query']),\n    'get_transactions' : IDL.Func(\n        [GetTransactionsRequest],\n        [GetTransactionsResponse],\n        ['query'],\n      ),\n    'icrc103_get_allowances' : IDL.Func(\n        [GetAllowancesArgs],\n        [icrc103_get_allowances_response],\n        ['query'],\n      ),\n    'icrc106_get_index_principal' : IDL.Func(\n        [],\n        [GetIndexPrincipalResult],\n        ['query'],\n      ),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(StandardRecord)],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], ['query']),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'icrc3_get_archives' : IDL.Func(\n        [GetArchivesArgs],\n        [GetArchivesResult],\n        ['query'],\n      ),\n    'icrc3_get_blocks' : IDL.Func(\n        [IDL.Vec(GetBlocksArgs)],\n        [GetBlocksResult],\n        ['query'],\n      ),\n    'icrc3_get_tip_certificate' : IDL.Func(\n        [],\n        [IDL.Opt(ICRC3DataCertificate)],\n        ['query'],\n      ),\n    'icrc3_supported_block_types' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'block_type' : IDL.Text }))],\n        ['query'],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const ChangeArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Opt(IDL.Nat64),\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Opt(IDL.Nat64),\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Opt(IDL.Principal),\n  });\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'change_archive_options' : IDL.Opt(ChangeArchiveOptions),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const InitArgs = IDL.Record({\n    'decimals' : IDL.Opt(IDL.Nat8),\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n      'trigger_threshold' : IDL.Nat64,\n      'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'index_principal' : IDL.Opt(IDL.Principal),\n    'token_name' : IDL.Text,\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerArg];\n};\n", "import { isNullish, toNullable } from \"@dfinity/utils\";\nimport type {\n  ApproveArgs,\n  icrc21_consent_message_request as ConsentMessageArgs,\n  TransferArg,\n  TransferFromArgs,\n} from \"../../candid/icrc_ledger\";\nimport type {\n  ApproveParams,\n  Icrc21ConsentMessageParams,\n  TransferFromParams,\n  TransferParams,\n} from \"../types/ledger.params\";\n\n// WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n// relationship between the memo and the icrc1Memo of a transaction. The ICRC-1\n// interface simply cannot set the memo field and the non-ICRC-1 interface\n// cannot set the icrc1Memo field, even though the icrc1Memo field is called\n// just \"memo\" in canister method params.\nexport const toTransferArg = ({\n  from_subaccount,\n  fee,\n  created_at_time,\n  memo,\n  ...rest\n}: TransferParams): TransferArg => ({\n  ...rest,\n  fee: toNullable(fee),\n  memo: toNullable(memo),\n  from_subaccount: toNullable(from_subaccount),\n  created_at_time: toNullable(created_at_time),\n});\n\nexport const toTransferFromArgs = ({\n  spender_subaccount,\n  fee,\n  created_at_time,\n  memo,\n  ...rest\n}: TransferFromParams): TransferFromArgs => ({\n  ...rest,\n  fee: toNullable(fee),\n  memo: toNullable(memo),\n  spender_subaccount: toNullable(spender_subaccount),\n  created_at_time: toNullable(created_at_time),\n});\n\nexport const toApproveArgs = ({\n  fee,\n  created_at_time,\n  memo,\n  from_subaccount,\n  expected_allowance,\n  expires_at,\n  ...rest\n}: ApproveParams): ApproveArgs => ({\n  ...rest,\n  fee: toNullable(fee),\n  memo: toNullable(memo),\n  from_subaccount: toNullable(from_subaccount),\n  created_at_time: toNullable(created_at_time),\n  expected_allowance: toNullable(expected_allowance),\n  expires_at: toNullable(expires_at),\n});\n\nexport const toIcrc21ConsentMessageArgs = ({\n  userPreferences: {\n    metadata: { utcOffsetMinutes, language },\n    deriveSpec,\n  },\n  ...rest\n}: Icrc21ConsentMessageParams): ConsentMessageArgs => ({\n  ...rest,\n  user_preferences: {\n    metadata: {\n      language,\n      utc_offset_minutes: toNullable(utcOffsetMinutes),\n    },\n    device_spec: isNullish(deriveSpec)\n      ? toNullable()\n      : toNullable(\n          \"GenericDisplay\" in deriveSpec\n            ? { GenericDisplay: null }\n            : {\n                LineDisplay: {\n                  characters_per_line: deriveSpec.LineDisplay.charactersPerLine,\n                  lines_per_page: deriveSpec.LineDisplay.linesPerPage,\n                },\n              },\n        ),\n  },\n});\n", "import type {\n  GetIndexPrincipalError,\n  icrc21_error as Icrc21RawError,\n} from \"../../candid/icrc_ledger\";\n\nexport class IcrcTransferError<T> extends Error {\n  public errorType: T;\n  constructor({ msg, errorType }: { msg?: string; errorType: T }) {\n    super(msg);\n    this.errorType = errorType;\n  }\n}\n\nexport class GenericError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly error_code: bigint,\n  ) {\n    super();\n  }\n}\n\nexport class ConsentMessageError extends Error {}\n\nexport class InsufficientPaymentError extends ConsentMessageError {}\nexport class UnsupportedCanisterCallError extends ConsentMessageError {}\nexport class ConsentMessageUnavailableError extends ConsentMessageError {}\n\nexport const mapIcrc21ConsentMessageError = (\n  rawError: Icrc21RawError,\n): ConsentMessageError => {\n  if (\"GenericError\" in rawError) {\n    return new GenericError(\n      rawError.GenericError.description,\n      rawError.GenericError.error_code,\n    );\n  }\n\n  if (\"InsufficientPayment\" in rawError) {\n    return new InsufficientPaymentError(\n      rawError.InsufficientPayment.description,\n    );\n  }\n\n  if (\"UnsupportedCanisterCall\" in rawError) {\n    return new UnsupportedCanisterCallError(\n      rawError.UnsupportedCanisterCall.description,\n    );\n  }\n  if (\"ConsentMessageUnavailable\" in rawError) {\n    return new ConsentMessageUnavailableError(\n      rawError.ConsentMessageUnavailable.description,\n    );\n  }\n\n  // Edge case\n  return new ConsentMessageError(\n    `Unknown error type ${JSON.stringify(rawError)}`,\n  );\n};\n\nexport class IndexPrincipalNotSetError extends Error {}\n\nexport const mapIcrc106GetIndexPrincipalError = (\n  err: GetIndexPrincipalError,\n) => {\n  if (\"IndexPrincipalNotSet\" in err) {\n    return new IndexPrincipalNotSetError(\n      \"Index principal is not set for this ledger canister.\",\n    );\n  }\n\n  return new GenericError(\n    err.GenericError.description,\n    err.GenericError.error_code,\n  );\n};\n"],
  "mappings": "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",
  "names": ["Canister", "createServices", "toNullable", "idlFactory", "IDL", "GetBlocksResult", "ICRC3Value", "Value", "ChangeArchiveOptions", "MetadataValue", "Subaccount", "Account", "ChangeFeeCollector", "FeatureFlags", "UpgradeArgs", "InitArgs", "LedgerArg", "BlockIndex", "ArchiveInfo", "GetBlocksArgs", "Map", "Block", "BlockRange", "QueryBlockArchiveFn", "GetBlocksResponse", "DataCertificate", "TxIndex", "GetTransactionsRequest", "Timestamp", "Burn", "Mint", "Approve", "Transfer", "Transaction", "TransactionRange", "QueryArchiveFn", "GetTransactionsResponse", "GetAllowancesArgs", "Allowance103", "GetAllowancesError", "icrc103_get_allowances_response", "GetIndexPrincipalError", "GetIndexPrincipalResult", "Tokens", "StandardRecord", "TransferArg", "TransferError", "TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "GetArchivesArgs", "GetArchivesResult", "ICRC3DataCertificate", "idlFactory", "IDL", "GetBlocksResult", "ICRC3Value", "Value", "ChangeArchiveOptions", "MetadataValue", "Subaccount", "Account", "ChangeFeeCollector", "FeatureFlags", "UpgradeArgs", "InitArgs", "LedgerArg", "BlockIndex", "ArchiveInfo", "GetBlocksArgs", "Map", "Block", "BlockRange", "QueryBlockArchiveFn", "GetBlocksResponse", "DataCertificate", "TxIndex", "GetTransactionsRequest", "Timestamp", "Burn", "Mint", "Approve", "Transfer", "Transaction", "TransactionRange", "QueryArchiveFn", "GetTransactionsResponse", "GetAllowancesArgs", "Allowance103", "GetAllowancesError", "icrc103_get_allowances_response", "GetIndexPrincipalError", "GetIndexPrincipalResult", "Tokens", "StandardRecord", "TransferArg", "TransferError", "TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "GetArchivesArgs", "GetArchivesResult", "ICRC3DataCertificate", "isNullish", "toNullable", "toTransferArg", "from_subaccount", "fee", "created_at_time", "memo", "rest", "toTransferFromArgs", "spender_subaccount", "toApproveArgs", "expected_allowance", "expires_at", "toIcrc21ConsentMessageArgs", "utcOffsetMinutes", "language", "deriveSpec", "IcrcTransferError", "msg", "errorType", "GenericError", "message", "error_code", "ConsentMessageError", "InsufficientPaymentError", "UnsupportedCanisterCallError", "ConsentMessageUnavailableError", "mapIcrc21ConsentMessageError", "rawError", "IndexPrincipalNotSetError", "mapIcrc106GetIndexPrincipalError", "err", "IcrcLedgerCanister", "_IcrcLedgerCanister", "Canister", "options", "service", "certifiedService", "canisterId", "createServices", "idlFactory", "params", "toNullable", "response", "toTransferArg", "IcrcTransferError", "toTransferFromArgs", "toApproveArgs", "certified", "rest", "icrc21_canister_call_consent_message", "toIcrc21ConsentMessageArgs", "mapIcrc21ConsentMessageError", "icrc106_get_index_principal", "mapIcrc106GetIndexPrincipalError"]
}
