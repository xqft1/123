{
  "version": 3,
  "sources": ["../../src/index.canister.ts", "../../candid/icrc_index.certified.idl.js", "../../candid/icrc_index.idl.js"],
  "sourcesContent": ["import type { Principal } from \"@dfinity/principal\";\nimport { Canister, createServices, type QueryParams } from \"@dfinity/utils\";\nimport type {\n  GetTransactions,\n  _SERVICE as IcrcIndexService,\n} from \"../candid/icrc_index\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/icrc_index.certified.idl\";\nimport { idlFactory } from \"../candid/icrc_index.idl\";\nimport { toGetTransactionsArgs } from \"./converters/index.converters\";\nimport { IndexError } from \"./errors/index.errors\";\nimport type { IcrcLedgerCanisterOptions } from \"./types/canister.options\";\nimport type { GetAccountTransactionsParams } from \"./types/index.params\";\n\nexport class IcrcIndexCanister extends Canister<IcrcIndexService> {\n  static create(options: IcrcLedgerCanisterOptions<IcrcIndexService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IcrcIndexService>({\n        options,\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IcrcIndexCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Get the transactions of an account\n   *\n   * Always certified.\n   * `get_account_transactions` needs to be called with an update\n   * because the index canisters makes a call to the ledger canister to get the transaction data.\n   * Index Canister only holds the transactions ids in state, not the whole transaction data.\n   */\n  getTransactions = async (\n    params: GetAccountTransactionsParams,\n  ): Promise<GetTransactions> => {\n    const response = await this.caller({\n      certified: true,\n    }).get_account_transactions(toGetTransactionsArgs(params));\n\n    if (\"Err\" in response) {\n      throw new IndexError(response.Err.message);\n    }\n\n    return response.Ok;\n  };\n\n  /**\n   * Returns the ledger canister ID related to the index canister.\n   */\n  ledgerId = (params: QueryParams): Promise<Principal> => {\n    const { ledger_id } = this.caller(params);\n    return ledger_id();\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icrc/candid/icrc_index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const TxId = IDL.Nat;\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(TxId),\n    'account' : Account,\n  });\n  const Burn = IDL.Record({\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Mint = IDL.Record({\n    'to' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n  });\n  const Approve = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'expected_allowance' : IDL.Opt(IDL.Nat),\n    'expires_at' : IDL.Opt(IDL.Nat64),\n    'spender' : Account,\n  });\n  const Transfer = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(Burn),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(Mint),\n    'approve' : IDL.Opt(Approve),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(Transfer),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : TxId,\n    'transaction' : Transaction,\n  });\n  const GetTransactions = IDL.Record({\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(TxId),\n  });\n  const GetTransactionsErr = IDL.Record({ 'message' : IDL.Text });\n  const GetTransactionsResult = IDL.Variant({\n    'Ok' : GetTransactions,\n    'Err' : GetTransactionsErr,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const ListSubaccountsArgs = IDL.Record({\n    'owner' : IDL.Principal,\n    'start' : IDL.Opt(SubAccount),\n  });\n  return IDL.Service({\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetTransactionsResult],\n        [],\n      ),\n    'ledger_id' : IDL.Func([], [IDL.Principal], []),\n    'list_subaccounts' : IDL.Func(\n        [ListSubaccountsArgs],\n        [IDL.Vec(SubAccount)],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArgs];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icrc/candid/icrc_index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const TxId = IDL.Nat;\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(TxId),\n    'account' : Account,\n  });\n  const Burn = IDL.Record({\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Mint = IDL.Record({\n    'to' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n  });\n  const Approve = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'expected_allowance' : IDL.Opt(IDL.Nat),\n    'expires_at' : IDL.Opt(IDL.Nat64),\n    'spender' : Account,\n  });\n  const Transfer = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Opt(Account),\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(Burn),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(Mint),\n    'approve' : IDL.Opt(Approve),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(Transfer),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : TxId,\n    'transaction' : Transaction,\n  });\n  const GetTransactions = IDL.Record({\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(TxId),\n  });\n  const GetTransactionsErr = IDL.Record({ 'message' : IDL.Text });\n  const GetTransactionsResult = IDL.Variant({\n    'Ok' : GetTransactions,\n    'Err' : GetTransactionsErr,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const ListSubaccountsArgs = IDL.Record({\n    'owner' : IDL.Principal,\n    'start' : IDL.Opt(SubAccount),\n  });\n  return IDL.Service({\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetTransactionsResult],\n        [],\n      ),\n    'ledger_id' : IDL.Func([], [IDL.Principal], ['query']),\n    'list_subaccounts' : IDL.Func(\n        [ListSubaccountsArgs],\n        [IDL.Vec(SubAccount)],\n        ['query'],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArgs];\n};\n"],
  "mappings": "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",
  "names": ["Canister", "createServices", "idlFactory", "IDL", "InitArgs", "TxId", "Account", "GetAccountTransactionsArgs", "Burn", "Mint", "Approve", "Transfer", "Transaction", "TransactionWithId", "GetTransactions", "GetTransactionsErr", "GetTransactionsResult", "SubAccount", "ListSubaccountsArgs", "idlFactory", "IDL", "InitArgs", "TxId", "Account", "GetAccountTransactionsArgs", "Burn", "Mint", "Approve", "Transfer", "Transaction", "TransactionWithId", "GetTransactions", "GetTransactionsErr", "GetTransactionsResult", "SubAccount", "ListSubaccountsArgs", "IcrcIndexCanister", "_IcrcIndexCanister", "Canister", "options", "service", "certifiedService", "canisterId", "createServices", "idlFactory", "params", "response", "toGetTransactionsArgs", "IndexError", "ledger_id"]
}
