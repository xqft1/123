import{a as k}from"./chunk-F74MWPN7.js";import{a as v,b as P,c as S}from"./chunk-OJD6CVD7.js";import{createServices as B}from"@dfinity/utils";var F=({IDL:t})=>{let r=t.Rec(),a=t.Record({ledger_id:t.Opt(t.Principal),retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),o=t.Record({ledger_id:t.Principal,retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),i=t.Variant({Upgrade:a,Init:o}),n=t.Nat,s=t.Vec(t.Nat8),e=t.Record({owner:t.Principal,subaccount:t.Opt(s)}),d=t.Record({max_results:t.Nat,start:t.Opt(n),account:e}),c=t.Nat,p=t.Record({from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c,spender:t.Opt(e)}),l=t.Record({to:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c}),u=t.Record({fee:t.Opt(c),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c,expected_allowance:t.Opt(c),expires_at:t.Opt(t.Nat64),spender:e}),_=t.Record({to:e,fee:t.Opt(c),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c,spender:t.Opt(e)}),m=t.Record({burn:t.Opt(p),kind:t.Text,mint:t.Opt(l),approve:t.Opt(u),timestamp:t.Nat64,transfer:t.Opt(_)}),g=t.Record({id:n,transaction:m}),O=t.Record({balance:c,transactions:t.Vec(g),oldest_tx_id:t.Opt(n)}),N=t.Record({message:t.Text}),R=t.Variant({Ok:O,Err:N}),f=t.Record({start:t.Nat,length:t.Nat}),x=t.Vec(t.Tuple(t.Text,r));r.fill(t.Variant({Int:t.Int,Map:x,Nat:t.Nat,Nat64:t.Nat64,Blob:t.Vec(t.Nat8),Text:t.Text,Array:t.Vec(r)}));let T=r,b=t.Record({blocks:t.Vec(T),chain_length:t.Nat64}),V=t.Record({ranges:t.Vec(t.Tuple(e,t.Vec(t.Tuple(n,n))))}),A=t.Record({owner:t.Principal,start:t.Opt(s)}),y=t.Record({num_blocks_synced:n});return t.Service({get_account_transactions:t.Func([d],[R],[]),get_blocks:t.Func([f],[b],[]),get_fee_collectors_ranges:t.Func([],[V],[]),icrc1_balance_of:t.Func([e],[c],[]),ledger_id:t.Func([],[t.Principal],[]),list_subaccounts:t.Func([A],[t.Vec(s)],[]),status:t.Func([],[y],[])})};var G=({IDL:t})=>{let r=t.Rec(),a=t.Record({ledger_id:t.Opt(t.Principal),retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),o=t.Record({ledger_id:t.Principal,retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),i=t.Variant({Upgrade:a,Init:o}),n=t.Nat,s=t.Vec(t.Nat8),e=t.Record({owner:t.Principal,subaccount:t.Opt(s)}),d=t.Record({max_results:t.Nat,start:t.Opt(n),account:e}),c=t.Nat,p=t.Record({from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c,spender:t.Opt(e)}),l=t.Record({to:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c}),u=t.Record({fee:t.Opt(c),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c,expected_allowance:t.Opt(c),expires_at:t.Opt(t.Nat64),spender:e}),_=t.Record({to:e,fee:t.Opt(c),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:c,spender:t.Opt(e)}),m=t.Record({burn:t.Opt(p),kind:t.Text,mint:t.Opt(l),approve:t.Opt(u),timestamp:t.Nat64,transfer:t.Opt(_)}),g=t.Record({id:n,transaction:m}),O=t.Record({balance:c,transactions:t.Vec(g),oldest_tx_id:t.Opt(n)}),N=t.Record({message:t.Text}),R=t.Variant({Ok:O,Err:N}),f=t.Record({start:t.Nat,length:t.Nat}),x=t.Vec(t.Tuple(t.Text,r));r.fill(t.Variant({Int:t.Int,Map:x,Nat:t.Nat,Nat64:t.Nat64,Blob:t.Vec(t.Nat8),Text:t.Text,Array:t.Vec(r)}));let T=r,b=t.Record({blocks:t.Vec(T),chain_length:t.Nat64}),V=t.Record({ranges:t.Vec(t.Tuple(e,t.Vec(t.Tuple(n,n))))}),A=t.Record({owner:t.Principal,start:t.Opt(s)}),y=t.Record({num_blocks_synced:n});return t.Service({get_account_transactions:t.Func([d],[R],["query"]),get_blocks:t.Func([f],[b],["query"]),get_fee_collectors_ranges:t.Func([],[V],["query"]),icrc1_balance_of:t.Func([e],[c],["query"]),ledger_id:t.Func([],[t.Principal],["query"]),list_subaccounts:t.Func([A],[t.Vec(s)],["query"]),status:t.Func([],[y],["query"])})};var h=class t extends k{static create(r){let{service:a,certifiedService:o,canisterId:i}=B({options:r,idlFactory:G,certifiedIdlFactory:F});return new t(i,a,o)}getTransactions=async({certified:r,...a})=>{let o=await this.caller({certified:r}).get_account_transactions(v(a));if("Err"in o)throw new S(o.Err.message);return o.Ok};ledgerId=r=>{let{ledger_id:a}=this.caller(r);return a()};status=r=>this.caller(r).status();listSubaccounts=({certified:r,...a})=>this.caller({certified:r}).list_subaccounts(P(a))};export{h as a};
//# sourceMappingURL=chunk-IHNDUXP4.js.map
