import { type IcrcAccount, type IcrcTokenMetadata, type IcrcTokenMetadataResponse } from "../types/ledger.responses";
/**
 * Encodes an Icrc-1 account compatible into a string.
 * Formatting Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/TextualEncoding.md
 *
 * @param account { owner: Principal, subaccount?: Uint8Array }
 * @returns string
 */
export declare const encodeIcrcAccount: ({ owner, subaccount, }: IcrcAccount) => string;
/**
 * Decodes a string into an Icrc-1 compatible account.
 * Formatting Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/TextualEncoding.md
 *
 * @param accountString string
 * @throws Error if the string is not a valid Icrc-1 account
 * @returns IcrcAccount { owner: Principal, subaccount?: Uint8Array }
 */
export declare const decodeIcrcAccount: (accountString: string) => IcrcAccount;
/**
 * Maps the token metadata information from a ledger response into a structured record.
 *
 * This utility processes an array of metadata key-value pairs provided by the ledger
 * and extracts specific fields, such as symbol, name, fee, decimals, and logo. It then
 * constructs a `IcrcTokenMetadata` record. If any required fields are missing,
 * the function returns `undefined`.
 *
 * @param {IcrcTokenMetadataResponse} response - An array of key-value pairs representing token metadata.
 *
 * @returns {IcrcTokenMetadata | undefined} - A structured metadata record or `undefined` if required fields are missing.
 */
export declare const mapTokenMetadata: (response: IcrcTokenMetadataResponse) => IcrcTokenMetadata | undefined;
